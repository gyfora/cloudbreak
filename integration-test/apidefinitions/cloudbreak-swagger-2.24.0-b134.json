{
  "swagger" : "2.0",
  "info" : {
    "description" : "Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji.\nCloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters.\nSequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments.\nOnce it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier.\nCloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul.\nFor further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>",
    "version" : "2.24.0-b134",
    "title" : "Cloudbreak API"
  },
  "basePath" : "/api",
  "tags" : [ {
    "name" : "authorization"
  }, {
    "name" : "v4{workspaceId}audits"
  }, {
    "name" : "autoscale"
  }, {
    "name" : "v4{workspaceId}blueprints_util"
  }, {
    "name" : "v4{workspaceId}blueprints"
  }, {
    "name" : "v4info"
  }, {
    "name" : "v4{workspaceId}cluster_templates"
  }, {
    "name" : "v4{workspaceId}databases"
  }, {
    "name" : "v4datalake"
  }, {
    "name" : "v4events"
  }, {
    "name" : "v4{workspaceId}file_systems"
  }, {
    "name" : "v4{workspaceId}imagecatalogs"
  }, {
    "name" : "v4{workspaceId}recipes"
  }, {
    "name" : "v4{workspaceId}stacks"
  }, {
    "name" : "v4user_profiles"
  }, {
    "name" : "v4users"
  }, {
    "name" : "v4utils"
  }, {
    "name" : "v4{workspaceId}"
  }, {
    "name" : "v4workspaces"
  }, {
    "name" : "v1internaldistrox"
  }, {
    "name" : "v1distrox"
  }, {
    "name" : "flow"
  } ],
  "schemes" : [ "http", "https" ],
  "paths" : {
    "/authorization/info" : {
      "get" : {
        "tags" : [ "authorization" ],
        "summary" : "list of required permissions for APIs",
        "description" : "",
        "operationId" : "info",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiAuthorizationInfo"
              },
              "uniqueItems" : true
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/audits" : {
      "get" : {
        "tags" : [ "v4{workspaceId}audits" ],
        "summary" : "List audit events for the given workspace",
        "description" : "Audit event operations",
        "operationId" : "getAuditEventsInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "resourceCrn",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuditEventV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/audits/zip" : {
      "get" : {
        "tags" : [ "v4{workspaceId}audits" ],
        "summary" : "List audit events for the given workspace in zip file",
        "description" : "Audit event operations",
        "operationId" : "getAuditEventsZipInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "resourceCrn",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/{workspaceId}/audits/{auditId}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}audits" ],
        "summary" : "Get audit event in workspace by id",
        "description" : "Audit event operations",
        "operationId" : "getAuditEventByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "auditId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuditEventV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/{userId}/cluster" : {
      "put" : {
        "tags" : [ "autoscale" ],
        "summary" : "update stack by id",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putClusterForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateClusterV4Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/autoscale/stack/all" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "retrieve all stacks",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getAllStackForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AutoscaleStackV4Responses"
            }
          }
        }
      }
    },
    "/autoscale/autoscale_cluster/crn/{crn}" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "get autoscale stack by crn in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getAutoscaleClusterByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AutoscaleStackV4Response"
            }
          }
        }
      }
    },
    "/autoscale/autoscale_cluster/name/{name}" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "get autoscale stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getAutoscaleClusterByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AutoscaleStackV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/authorize/{userId}/{tenant}/{permission}" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "operationId" : "authorizeForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenant",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permission",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/AuthorizeForAutoscaleV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/instances" : {
      "delete" : {
        "tags" : [ "autoscale" ],
        "summary" : "deletes multiple instances from the stack's cluster in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "decommissionInstancesForClusterCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "workspaceId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "instanceId",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/status" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "retrieve stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getStackStatusForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackStatusV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/recommendation" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "operationId" : "getRecommendation",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/AutoscaleRecommendationV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/{userId}" : {
      "put" : {
        "tags" : [ "autoscale" ],
        "summary" : "update stack by id",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putStackForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateStackV4Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/autoscale/clusterproxy" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "operationId" : "getClusterProxyconfiguration",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ClusterProxyConfiguration"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}/certificate" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "retrieves the TLS certificate used by the gateway",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getCertificateStackForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CertificateV4Response"
            }
          }
        }
      }
    },
    "/autoscale/stack/crn/{crn}" : {
      "get" : {
        "tags" : [ "autoscale" ],
        "summary" : "retrieve stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getStackForAutoscale",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints_util/service_versions" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints_util" ],
        "summary" : "retrive services and versions",
        "description" : "Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.",
        "operationId" : "getServiceVersionsByBlueprintName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "blueprintName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintServicesV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints_util/services" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints_util" ],
        "summary" : "creates a recommendation that advises cloud resources for the given blueprint",
        "description" : "Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.",
        "operationId" : "getServiceList",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SupportedVersionsV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints_util/recommendation" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints_util" ],
        "summary" : "creates a recommendation that advises cloud resources for the given blueprint",
        "description" : "Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.",
        "operationId" : "createRecommendationForWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "blueprintName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "credentialName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "region",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "platformVariant",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "availabilityZone",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "DATAHUB", "DATALAKE", "DEFAULT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecommendationV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints_util/service_dependencies" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints_util" ],
        "summary" : "creates a recommendation that advises cloud resources for the given blueprint",
        "description" : "Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.",
        "operationId" : "getServiceAndDependencies",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "services",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "platform",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ServiceDependencyMatrixV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints_util/generate" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints_util" ],
        "summary" : "creates a recommendation that advises cloud resources for the given blueprint",
        "description" : "Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.",
        "operationId" : "getGeneratedTemplate",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "services",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "platform",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GeneratedCmTemplateV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints/crn/{crn}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "get blueprint by crn",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "getBlueprintByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "delete blueprint by crn",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "deleteBlueprintByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints/{name}/request" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "retrieve validation request by blueprint name",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "getBlueprintRequestFromName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Request"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "list blueprints for the given workspace",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "listBlueprintsByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "withSdx",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4ViewResponses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "create blueprint in workspace",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "createBlueprintInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BlueprintV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "delete multiple blueprints by name in workspace",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "deleteBlueprintsInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints/name/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "get blueprint by name in workspace",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "getBlueprintInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "delete blueprint by name in workspace",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "deleteBlueprintInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlueprintV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints/cli_create" : {
      "post" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "produce cli command input",
        "description" : "Cluster definitions are a declarative definition of a Hadoop cluster. With a blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.",
        "operationId" : "getCreateClusterTemplateRequestForCli",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BlueprintV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CreateClusterTemplateRequest"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/blueprints/{name}/parameters" : {
      "get" : {
        "tags" : [ "v4{workspaceId}blueprints" ],
        "summary" : "returns custom parameters",
        "description" : "",
        "operationId" : "getBlueprintCustomParameters",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParametersQueryV4Response"
            }
          }
        }
      }
    },
    "/v4/info" : {
      "get" : {
        "tags" : [ "v4info" ],
        "summary" : "get info",
        "description" : "Info config operations",
        "operationId" : "info",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CloudbreakInfoResponse"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/cluster_templates/crn/{crn}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "get cluster template by crn in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "getClusterTemplateByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "delete cluster template by crn in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "deleteClusterTemplateByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/cluster_templates" : {
      "get" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "list cluster templates for the given workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "listClusterTemplatesByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateViewV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "create cluster template in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "createClusterTemplateInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClusterTemplateV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "delete multiple cluster templates by name in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "deleteClusterTemplatesInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "environmentName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentCrn",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/cluster_templates/name/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "get cluster template by name in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "getClusterTemplateByNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}cluster_templates" ],
        "summary" : "delete cluster template by name in workspace",
        "description" : "A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.",
        "operationId" : "deleteClusterTemplateByNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterTemplateV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/databases/{name}/request" : {
      "get" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "get request",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "getDatabaseRequestFromNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Request"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/databases" : {
      "get" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "list RDS configs",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "listDatabasesByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "environment",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "attachGlobal",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "create RDS config",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "createDatabaseInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DatabaseV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "delete multiple RDS configs by name",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "deleteDatabasesInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/databases/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "get RDS config by name",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "getDatabaseInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}databases" ],
        "summary" : "delete RDS config by name",
        "description" : "A Database Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.",
        "operationId" : "deleteDatabaseInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseV4Response"
            }
          }
        }
      }
    },
    "/v4/datalake" : {
      "get" : {
        "tags" : [ "v4datalake" ],
        "summary" : "list stacks for the given workspace and environment name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "listDatalakes",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "environment",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentCrn",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackViewV4Responses"
            }
          }
        }
      }
    },
    "/v4/events/{name}/structured" : {
      "get" : {
        "tags" : [ "v4events" ],
        "summary" : "retrieve events by name",
        "description" : "Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable",
        "operationId" : "getStructuredEventsInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StructuredEventContainer"
            }
          }
        }
      }
    },
    "/v4/events/{name}" : {
      "get" : {
        "tags" : [ "v4events" ],
        "summary" : "retrieve events by name",
        "description" : "Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable",
        "operationId" : "getEventsByStackNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCloudbreakEventV4Response"
            }
          }
        }
      }
    },
    "/v4/events/{name}/zip" : {
      "get" : {
        "tags" : [ "v4events" ],
        "summary" : "retrieve events in zip by name",
        "description" : "Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable",
        "operationId" : "getStructuredEventsZipInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/events" : {
      "get" : {
        "tags" : [ "v4events" ],
        "summary" : "retrieve events by timestamp (long)",
        "description" : "Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable",
        "operationId" : "getEventsInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "since",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CloudbreakEventV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/file_systems/parameters" : {
      "get" : {
        "tags" : [ "v4{workspaceId}file_systems" ],
        "summary" : "returns filesystem parameters",
        "description" : "",
        "operationId" : "getFileSystemParameters",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "blueprintName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "clusterName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "storageName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileSystemType",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "attachedCluster",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "secure",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FileSystemParameterV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs/crn/{crn}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "get image catalog by crn in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "getImageCatalogByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "withImages",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "delete image catalog by crn in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "deleteImageCatalogByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs/{name}/request" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "retrieve imagecatalog request by imagecatalog name",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "getImageCatalogRequestFromNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Request"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs/images" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "determines available images for the given stack or platformfrom the default image catalog",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "getImagesInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "stackName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "platform",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImagesV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "list image catalogs for the given workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "listImageCatalogsByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "create image catalog in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "createImageCatalogInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ImageCatalogV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "update Image Catalog by id",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "updateImageCatalogInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateImageCatalogV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "delete multiple image catalogs by name in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "deleteImageCatalogsInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs/name/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "get image catalog by name in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "getImageCatalogInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "withImages",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "delete image catalog by name in workspace",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "deleteImageCatalogInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageCatalogV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/image_catalogs/{name}/images" : {
      "get" : {
        "tags" : [ "v4{workspaceId}imagecatalogs" ],
        "summary" : "determines available images for the given stack or platformfrom the given imagecatalog name",
        "description" : "Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.",
        "operationId" : "getImagesByNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stackName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "platform",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImagesV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/recipes/crn/{crn}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "get recipe by crn in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "getRecipeByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "delete recipe by crn in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "deleteRecipeByCrnInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/recipes/{name}/request" : {
      "get" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "retrieve recipe request by recipe name",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "getRecipeRequestFromNameInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Request"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/recipes" : {
      "get" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "list recipes for the given workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "listRecipesByWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeViewV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "create recipe in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "createRecipeInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RecipeV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "delete multiple recipes by name in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "deleteRecipesInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Responses"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/recipes/name/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "get recipe by name in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "getRecipeInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "delete recipe by name in workspace",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "deleteRecipeInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecipeV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/recipes/cli_create" : {
      "post" : {
        "tags" : [ "v4{workspaceId}recipes" ],
        "summary" : "produce cli command input",
        "description" : "Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.",
        "operationId" : "getCreateRecipeRequestForCli",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RecipeV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CreateRecipeRequest"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/crn/{crn}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "get stack by crn in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getStackByCrnInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entries",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/cluster" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "update cluster by stack id",
        "description" : "Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.",
        "operationId" : "putClusterV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateClusterV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "deletes the stack (with kerberos cluster) by name in workspace",
        "description" : "Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.",
        "operationId" : "deleteWithKerberos",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "list stacks for the given workspace and environment name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "listStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "environment",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyDatalakes",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackViewV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "create stack in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "postStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StackV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/instance" : {
      "delete" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "deletes instance from the stack's cluster in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteInstanceStackV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instanceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/stop" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "stops the stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "stopStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/start" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "starts the stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "startStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/scaling" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "scales the stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putScalingStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StackScaleV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/manual_repair" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "repairs the stack by name in workspace",
        "description" : "Removing the failed nodes and starting new nodes to substitute them.",
        "operationId" : "repairStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClusterRepairV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/upgrade" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "upgrades the stack by name in workspace",
        "description" : "Removing all nodes and starting new nodes with the latest image. If the cluster already uses the the latest image then no remove/restart will happen.",
        "operationId" : "upgradeOsInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/check_for_upgrade" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "check for upgrades for the stack by name in workspace",
        "description" : "Checks for upgrades for the given cluster.",
        "operationId" : "checkForOsUpgradeInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UpgradeOptionV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/blueprint" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "posts stack for blueprint in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "postStackForBlueprintV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StackV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GeneratedBlueprintV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/change_image" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "checks image in stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "changeImageStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StackImageChangeV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/ambari_password" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "update stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putpasswordStackV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserNamePasswordV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/maintenance" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "set maintenance mode for the cluster by name",
        "description" : "Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.",
        "operationId" : "setClusterMaintenanceMode",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MaintenanceModeV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/inventory" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "Generate hosts inventory",
        "description" : "",
        "operationId" : "getClusterHostsInventory",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/retry" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "List retryable failed flows",
        "description" : "List all, currently retryable operations for the stack",
        "operationId" : "listRetryableFlowsV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RetryableFlowResponse"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "retries the stack by name in workspace",
        "description" : "Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.",
        "operationId" : "retryStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/request" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "gets StackRequest by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getStackRequestFromNameV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Request"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/status" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "retrieve stack status by stack name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "statusStackV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackStatusV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/instances" : {
      "delete" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "deletes multiple instances from the stack's cluster in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteMultipleInstancesStackV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/check_cluster_upgrade" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "Checks for upgrade options by name",
        "description" : "",
        "operationId" : "checkForClusterUpgradeByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpgradeV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UpgradeV4Response"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/cluster_upgrade" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "Upgrades a cluster to the latest CM or CDH version",
        "description" : "",
        "operationId" : "upgradeClusterByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/salt_update" : {
      "put" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "Update salt states on cluster",
        "description" : "",
        "operationId" : "updateSaltByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}" : {
      "get" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "get stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entries",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "delete stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/{workspaceId}/stacks/{name}/sync" : {
      "post" : {
        "tags" : [ "v4{workspaceId}stacks" ],
        "summary" : "syncs the stack by name in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "syncStackInWorkspaceV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v4/user_profiles/terminated_clusters_preferences" : {
      "get" : {
        "tags" : [ "v4user_profiles" ],
        "summary" : "get user preference to show or hide terminated clusters",
        "description" : "User preference whether to show or hide terminated instances and how old deleted instances should be shown.",
        "operationId" : "getTerminatedClustersPreferences",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShowTerminatedClusterPreferencesV4Response"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "v4user_profiles" ],
        "summary" : "set user preference to show or hide terminated clusters",
        "description" : "User preference whether to show or hide terminated instances and how old deleted instances should be shown.",
        "operationId" : "putTerminatedClustersPreferences",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ShowTerminatedClustersPreferencesV4Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "v4user_profiles" ],
        "summary" : "delete user preference to show or hide terminated clusters",
        "description" : "User preference whether to show or hide terminated instances and how old deleted instances should be shown.",
        "operationId" : "deleteTerminatedClustersPreferences",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/user_profiles" : {
      "get" : {
        "tags" : [ "v4user_profiles" ],
        "summary" : "user related profile",
        "description" : "Users can be invited under an account by the administrator, and all resources ",
        "operationId" : "getUserProfileInWorkspace",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserProfileV4Response"
            }
          }
        }
      }
    },
    "/v4/users/evict" : {
      "delete" : {
        "tags" : [ "v4users" ],
        "summary" : "remove current user from cache",
        "description" : "Users can be invited under an account by the administrator, and all resources ",
        "operationId" : "evictCurrentUserDetails",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserEvictV4Response"
            }
          }
        }
      }
    },
    "/v4/users" : {
      "get" : {
        "tags" : [ "v4users" ],
        "summary" : "retrieve all users in the tenant",
        "description" : "Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprint, credentials, clusters) can be shared across account users",
        "operationId" : "getAllUsers",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserV4Responses"
            }
          }
        }
      }
    },
    "/v4/utils/stack_matrix" : {
      "get" : {
        "tags" : [ "v4utils" ],
        "summary" : "returns default ambari details for distinct HDP and HDF",
        "description" : "",
        "operationId" : "getStackMatrixUtilV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackMatrixV4Response"
            }
          }
        }
      }
    },
    "/v4/utils/cloud_storage_matrix" : {
      "get" : {
        "tags" : [ "v4utils" ],
        "summary" : "returns supported cloud storage for stack version",
        "description" : "Define stack version at least at patch level eg. 2.6.0",
        "operationId" : "getCloudStorageMatrixV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "stackVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CloudStorageSupportedV4Responses"
            }
          }
        }
      }
    },
    "/v4/utils/default_security_rules" : {
      "get" : {
        "tags" : [ "v4utils" ],
        "summary" : "get default security rules",
        "description" : "Security Rules operations",
        "operationId" : "getDefaultSecurityRules",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SecurityRulesV4Response"
            }
          }
        }
      }
    },
    "/v4/utils/renew_certificate" : {
      "post" : {
        "tags" : [ "v4utils" ],
        "summary" : "Trigger a certificate renewal on the desired cluster which is identified via stack's name",
        "description" : "Trigger a certificate renewal on the specified cluster.",
        "operationId" : "renewCertificate",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RenewCertificateV4Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v4/utils/check_right" : {
      "post" : {
        "tags" : [ "v4utils" ],
        "summary" : "Checking rights from UI",
        "description" : "Check right from UI",
        "operationId" : "checkRight",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CheckRightV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CheckRightV4Response"
            }
          }
        }
      }
    },
    "/v4/utils/client" : {
      "get" : {
        "tags" : [ "v4utils" ],
        "summary" : "checks the client version",
        "description" : "",
        "operationId" : "checkClientVersionV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VersionCheckResult"
            }
          }
        }
      }
    },
    "/v4/utils/validate_repository" : {
      "post" : {
        "tags" : [ "v4utils" ],
        "summary" : "validate repository configs fields, check their availability",
        "description" : "Repository configs validation related operations",
        "operationId" : "repositoryConfigsValidationV4",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RepoConfigValidationV4Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RepoConfigValidationV4Response"
            }
          }
        }
      }
    },
    "/v4/utils/deployment" : {
      "get" : {
        "tags" : [ "v4utils" ],
        "summary" : "retrieve account preferences for admin user",
        "description" : "Account related preferences that could be managed by the account admins and different restrictions could be added to Cloudbreak resources.",
        "operationId" : "getDeploymentInfo",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeploymentPreferencesV4Response"
            }
          }
        }
      }
    },
    "/v4/utils/notification_test" : {
      "post" : {
        "tags" : [ "v4utils" ],
        "summary" : "Trigger a new notification to the notification system could be validated from the begins",
        "description" : "Account related preferences that could be managed by the account admins and different restrictions could be added to Cloudbreak resources.",
        "operationId" : "postNotificationTest",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceEventResponse"
            }
          }
        }
      }
    },
    "/v4/{workspaceId}/knox_services" : {
      "get" : {
        "tags" : [ "v4{workspaceId}" ],
        "summary" : "returns supported knox services",
        "description" : "",
        "operationId" : "getKnoxServices",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "workspaceId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "blueprintName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ExposedServiceV4Responses"
            }
          }
        }
      }
    },
    "/v4/workspaces/{name}" : {
      "get" : {
        "tags" : [ "v4workspaces" ],
        "summary" : "retrieve an workspace by name",
        "description" : "Workspaces are a way of grouping resources, workspace owners can add users to their workspaces with different permission sets",
        "operationId" : "getWorkspaceByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkspaceV4Response"
            }
          }
        }
      }
    },
    "/v4/workspaces" : {
      "get" : {
        "tags" : [ "v4workspaces" ],
        "summary" : "retrieve workspaces",
        "description" : "Workspaces are a way of grouping resources, workspace owners can add users to their workspaces with different permission sets",
        "operationId" : "getWorkspaces",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkspaceV4Responses"
            }
          }
        }
      }
    },
    "/v1/internal/distrox/crn/{crn}" : {
      "get" : {
        "tags" : [ "v1internaldistrox" ],
        "summary" : "get stack by crn (for internal user)",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getDistroXInternalV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackViewV4Response"
            }
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "get stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entries",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "delete stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/status" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "retrieve stack status by stack crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "statusDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackStatusV4Response"
            }
          }
        }
      }
    },
    "/v1/distrox" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "list stacks by environment crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "listDistroXV1",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "environmentName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentCrn",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackViewV4Responses"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "create stack",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "postDistroXV1",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXV1Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "delete multiple stacks by their names",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteMultipleDistroXClustersByNamesV1",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXMultiDeleteV1Request"
          }
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "get stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entries",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackV4Response"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "delete stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/sync" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "syncs the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "syncDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/retry" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "List retryable failed flows",
        "description" : "List all, currently retryable operations for the stack",
        "operationId" : "listRetryableFlowsDistroXV1",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RetryableFlowResponse"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "retries the stack by name",
        "description" : "Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.",
        "operationId" : "retryDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/sync" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "syncs the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "syncDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/retry" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "retries the stack by crn",
        "description" : "Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.",
        "operationId" : "retryDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/stop" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "stops the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "stopDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/stop" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "stops the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "stopDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v1/distrox/name/stop" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "stops the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "stopDistroXV1ByNames",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "names",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/stop" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "stops the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "stopDistroXV1ByCrns",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crns",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/start" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "starts the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "startDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/start" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "starts the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "startDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowIdentifier"
            }
          }
        }
      }
    },
    "/v1/distrox/name/start" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "starts the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "startDistroXV1ByNames",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "names",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/start" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "starts the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "startDistroXV1ByCrns",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crns",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/scaling" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "scales the stack by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putScalingDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXScaleV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/scaling" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "scales the stack by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "putScalingDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXScaleV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/manual_repair" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "repairs the stack by name",
        "description" : "Removing the failed nodes and starting new nodes to substitute them.",
        "operationId" : "repairDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXRepairV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/manual_repair" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "repairs the stack by crn",
        "description" : "Removing the failed nodes and starting new nodes to substitute them.",
        "operationId" : "repairDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXRepairV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/blueprint" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "posts stack for blueprint by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "postDistroXForBlueprintV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXV1Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GeneratedBlueprintV4Response"
            }
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/blueprint" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "posts stack for blueprint by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "postDistroXForBlueprintV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXV1Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GeneratedBlueprintV4Response"
            }
          }
        }
      }
    },
    "/v1/distrox/name/{name}/cli_create" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "gets StackRequest by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getDistroXRequestV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/cli_create" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "gets StackRequest by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "getDistroXRequestV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/v1/distrox/name/{name}/status" : {
      "get" : {
        "tags" : [ "v1distrox" ],
        "summary" : "retrieve stack status by stack name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "statusDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StackStatusV4Response"
            }
          }
        }
      }
    },
    "/v1/distrox/name/{name}/instance" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes instance from the stack's cluster by name",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteInstanceDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instanceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/instance" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes instance from the stack's cluster by crn",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteInstanceDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instanceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/instances" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes multiple instances from the stack's cluster in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteInstancesDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/instances" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes multiple instances from the stack's cluster in workspace",
        "description" : "Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.",
        "operationId" : "deleteInstancesDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/maintenance" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "set maintenance mode for the cluster by name",
        "description" : "Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.",
        "operationId" : "setDistroXMaintenanceModeByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXMaintenanceModeV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/maintenance" : {
      "put" : {
        "tags" : [ "v1distrox" ],
        "summary" : "set maintenance mode for the cluster by crn",
        "description" : "Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.",
        "operationId" : "setDistroXMaintenanceModeByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXMaintenanceModeV1Request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/name/{name}/cluster" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes the stack (with kerberos cluster) by name",
        "description" : "Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.",
        "operationId" : "deleteWithKerberosDistroXV1ByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/crn/{crn}/cluster" : {
      "delete" : {
        "tags" : [ "v1distrox" ],
        "summary" : "deletes the stack (with kerberos cluster) by crn",
        "description" : "Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.",
        "operationId" : "deleteWithKerberosDistroXV1ByCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "crn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forced",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/distrox/cli_create" : {
      "post" : {
        "tags" : [ "v1distrox" ],
        "summary" : "produce cli command input",
        "description" : "Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.",
        "operationId" : "getCreateClusterForCli",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DistroXV1Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/flow/logs/{flowId}/last" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get last flow log by flow id",
        "description" : "Flow log operations",
        "operationId" : "getLastFlowById",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowLogResponse"
            }
          }
        }
      }
    },
    "/flow/logs/{flowId}" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get flow logs by flow id",
        "description" : "Flow log operations",
        "operationId" : "getFlowLogsByFlowId",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FlowLogResponse"
              }
            }
          }
        }
      }
    },
    "/flow/logs/resource/name/{resourceName}/last" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get last flow log for resource by resource name",
        "description" : "Flow log operations",
        "operationId" : "getLastFlowByResourceName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowLogResponse"
            }
          }
        }
      }
    },
    "/flow/logs/resource/crn/{resourceCrn}/last" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get last flow log for resource by resource CRN",
        "description" : "Flow log operations",
        "operationId" : "getLastFlowByResourceCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceCrn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowLogResponse"
            }
          }
        }
      }
    },
    "/flow/logs/resource/name/{resourceName}" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get flow logs for resource by resource name",
        "description" : "Flow log operations",
        "operationId" : "getFlowLogsByResourceName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FlowLogResponse"
              }
            }
          }
        }
      }
    },
    "/flow/logs/resource/crn/{resourceCrn}" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Get flow logs for resource by resource CRN",
        "description" : "Flow log operations",
        "operationId" : "getFlowLogsByResourceCrn",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceCrn",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FlowLogResponse"
              }
            }
          }
        }
      }
    },
    "/flow/check/chainId/{chainId}" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Check if there is a running flow for chain id",
        "description" : "Flow log operations",
        "operationId" : "hasFlowRunningByChainId",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "chainId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowCheckResponse"
            }
          }
        }
      }
    },
    "/flow/check/flowId/{flowId}" : {
      "get" : {
        "tags" : [ "flow" ],
        "summary" : "Check if there is a running flow for flow id",
        "description" : "Flow log operations",
        "operationId" : "hasFlowRunningByFlowId",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowCheckResponse"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "ApiAuthorizationInfo" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string"
        },
        "httpMethod" : {
          "type" : "string"
        },
        "newAuthorization" : {
          "$ref" : "#/definitions/NewAuthorizationInfo"
        },
        "legacyAuthorization" : {
          "$ref" : "#/definitions/LegacyAuthorizationInfo"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "FieldAuthorizationInfo" : {
      "type" : "object",
      "properties" : {
        "fieldName" : {
          "type" : "string"
        },
        "permission" : {
          "type" : "string"
        }
      }
    },
    "LegacyAuthorizationInfo" : {
      "type" : "object",
      "properties" : {
        "permissionNeeded" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "NewAuthorizationInfo" : {
      "type" : "object",
      "properties" : {
        "permissionsNeededForApi" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "permissionsNeededForRequestObject" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FieldAuthorizationInfo"
          }
        }
      }
    },
    "AuditEventV4Response" : {
      "type" : "object",
      "properties" : {
        "auditId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "structuredEvent" : {
          "$ref" : "#/definitions/StructuredEvent"
        },
        "operation" : {
          "$ref" : "#/definitions/OperationDetails"
        },
        "rawFlowEvent" : {
          "$ref" : "#/definitions/StructuredFlowEvent"
        },
        "rawRestEvent" : {
          "$ref" : "#/definitions/StructuredRestCallEvent"
        },
        "rawNotification" : {
          "$ref" : "#/definitions/StructuredNotificationEvent"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "AuditEventV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuditEventV4Response"
          }
        }
      }
    },
    "BlueprintDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "blueprintName" : {
          "type" : "string"
        },
        "blueprintJson" : {
          "type" : "string"
        }
      }
    },
    "ClusterDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "statusReason" : {
          "type" : "string"
        },
        "kerberosType" : {
          "type" : "string"
        },
        "gatewayEnabled" : {
          "type" : "boolean"
        },
        "gatewayType" : {
          "type" : "string"
        },
        "ssoType" : {
          "type" : "string"
        },
        "ambariVersion" : {
          "type" : "string"
        },
        "clusterType" : {
          "type" : "string"
        },
        "clusterVersion" : {
          "type" : "string"
        },
        "hostGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "externalDatabase" : {
          "type" : "boolean"
        },
        "databaseType" : {
          "type" : "string"
        },
        "fileSystemType" : {
          "type" : "string"
        }
      }
    },
    "FlowDetails" : {
      "type" : "object",
      "properties" : {
        "flowChainType" : {
          "type" : "string"
        },
        "flowType" : {
          "type" : "string"
        },
        "flowChainId" : {
          "type" : "string"
        },
        "flowId" : {
          "type" : "string"
        },
        "flowState" : {
          "type" : "string"
        },
        "nextFlowState" : {
          "type" : "string"
        },
        "flowEvent" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "InstanceGroupDetails" : {
      "type" : "object",
      "properties" : {
        "groupName" : {
          "type" : "string"
        },
        "groupType" : {
          "type" : "string"
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "instanceType" : {
          "type" : "string"
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VolumeDetails"
          }
        },
        "securityGroup" : {
          "$ref" : "#/definitions/SecurityGroupDetails"
        }
      }
    },
    "LdapDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "serverHost" : {
          "type" : "string"
        },
        "serverPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "protocol" : {
          "type" : "string"
        },
        "userSearchBase" : {
          "type" : "string"
        },
        "userDnPattern" : {
          "type" : "string"
        },
        "groupSearchBase" : {
          "type" : "string"
        },
        "userNameAttribute" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "directoryType" : {
          "type" : "string"
        },
        "userObjectClass" : {
          "type" : "string"
        },
        "groupObjectClass" : {
          "type" : "string"
        },
        "groupNameAttribute" : {
          "type" : "string"
        },
        "groupMemberAttribute" : {
          "type" : "string"
        },
        "adminGroup" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        },
        "workspaceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "userId" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "tenantName" : {
          "type" : "string"
        }
      }
    },
    "LdapNotificationDetails" : {
      "type" : "object",
      "properties" : {
        "notificationType" : {
          "type" : "string"
        },
        "notification" : {
          "type" : "string"
        },
        "ldapDetails" : {
          "$ref" : "#/definitions/LdapDetails"
        }
      }
    },
    "NotificationDetails" : {
      "type" : "object",
      "properties" : {
        "notificationType" : {
          "type" : "string"
        },
        "notification" : {
          "type" : "string"
        },
        "cloud" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "availabiltyZone" : {
          "type" : "string"
        },
        "stackId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "stackCrn" : {
          "type" : "string"
        },
        "stackName" : {
          "type" : "string"
        },
        "stackStatus" : {
          "type" : "string"
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "instanceGroup" : {
          "type" : "string"
        },
        "clusterId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "clusterName" : {
          "type" : "string"
        },
        "clusterStatus" : {
          "type" : "string"
        },
        "blueprintName" : {
          "type" : "string"
        },
        "blueprintId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "OperationDetails" : {
      "type" : "object",
      "properties" : {
        "eventType" : {
          "type" : "string",
          "enum" : [ "REST", "FLOW", "NOTIFICATION" ]
        },
        "resourceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "resourceCrn" : {
          "type" : "string"
        },
        "resourceName" : {
          "type" : "string"
        },
        "resourceType" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "userId" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "cloudbreakId" : {
          "type" : "string"
        },
        "cloudbreakVersion" : {
          "type" : "string"
        },
        "workspaceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "tenant" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        },
        "utcdateTime" : {
          "type" : "string"
        }
      }
    },
    "RdsDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "connectionURL" : {
          "type" : "string"
        },
        "databaseEngine" : {
          "type" : "string"
        },
        "connectionDriver" : {
          "type" : "string"
        },
        "creationDate" : {
          "type" : "integer",
          "format" : "int64"
        },
        "stackVersion" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "connectorJarUrl" : {
          "type" : "string"
        },
        "workspaceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "userId" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "tenantName" : {
          "type" : "string"
        }
      }
    },
    "RdsNotificationDetails" : {
      "type" : "object",
      "properties" : {
        "notificationType" : {
          "type" : "string"
        },
        "notification" : {
          "type" : "string"
        },
        "rdsDetails" : {
          "$ref" : "#/definitions/RdsDetails"
        }
      }
    },
    "RestCallDetails" : {
      "type" : "object",
      "properties" : {
        "restRequest" : {
          "$ref" : "#/definitions/RestRequestDetails"
        },
        "restResponse" : {
          "$ref" : "#/definitions/RestResponseDetails"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "RestRequestDetails" : {
      "type" : "object",
      "properties" : {
        "requestUri" : {
          "type" : "string"
        },
        "mediaType" : {
          "type" : "string"
        },
        "method" : {
          "type" : "string"
        },
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "cookies" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "body" : {
          "type" : "string"
        }
      }
    },
    "RestResponseDetails" : {
      "type" : "object",
      "properties" : {
        "statusCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "statusText" : {
          "type" : "string"
        },
        "mediaType" : {
          "type" : "string"
        },
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "cookies" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "body" : {
          "type" : "string"
        }
      }
    },
    "SecurityGroupDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "securityGroupId" : {
          "type" : "string"
        },
        "securityGroupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "securityRules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SecurityRuleDetails"
          }
        }
      }
    },
    "SecurityRuleDetails" : {
      "type" : "object",
      "properties" : {
        "cidr" : {
          "type" : "string"
        },
        "ports" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        }
      }
    },
    "StackDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string"
        },
        "availabilityZone" : {
          "type" : "string"
        },
        "cloudPlatform" : {
          "type" : "string"
        },
        "platformVariant" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "detailedStatus" : {
          "type" : "string"
        },
        "statusReason" : {
          "type" : "string"
        },
        "cloudbreakVersion" : {
          "type" : "string"
        },
        "imageIdentifier" : {
          "type" : "string"
        },
        "ambariVersion" : {
          "type" : "string"
        },
        "clusterType" : {
          "type" : "string"
        },
        "clusterVersion" : {
          "type" : "string"
        },
        "prewarmedImage" : {
          "type" : "boolean"
        },
        "existingNetwork" : {
          "type" : "boolean"
        },
        "existingSubnet" : {
          "type" : "boolean"
        },
        "instanceGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupDetails"
          }
        },
        "datalakeId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "datalakeResourceId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "StructuredEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "operation" : {
          "$ref" : "#/definitions/OperationDetails"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "StructuredFlowEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "operation" : {
          "$ref" : "#/definitions/OperationDetails"
        },
        "flow" : {
          "$ref" : "#/definitions/FlowDetails"
        },
        "stack" : {
          "$ref" : "#/definitions/StackDetails"
        },
        "cluster" : {
          "$ref" : "#/definitions/ClusterDetails"
        },
        "blueprintDetails" : {
          "$ref" : "#/definitions/BlueprintDetails"
        },
        "exception" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "StructuredNotificationEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "operation" : {
          "$ref" : "#/definitions/OperationDetails"
        },
        "notificationDetails" : {
          "$ref" : "#/definitions/NotificationDetails"
        },
        "ldapNotificationDetails" : {
          "$ref" : "#/definitions/LdapNotificationDetails"
        },
        "rdsNotificationDetails" : {
          "$ref" : "#/definitions/RdsNotificationDetails"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "StructuredRestCallEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "operation" : {
          "$ref" : "#/definitions/OperationDetails"
        },
        "restCall" : {
          "$ref" : "#/definitions/RestCallDetails"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "VolumeDetails" : {
      "type" : "object",
      "properties" : {
        "volumeType" : {
          "type" : "string"
        },
        "volumeSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "volumeCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "HostGroupAdjustmentV4Request" : {
      "type" : "object",
      "required" : [ "hostGroup", "scalingAdjustment" ],
      "properties" : {
        "hostGroup" : {
          "type" : "string",
          "description" : "name of the host group"
        },
        "scalingAdjustment" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "scaling adjustment of the host groups"
        },
        "withStackUpdate" : {
          "type" : "boolean",
          "description" : "on cluster update, update stack too"
        },
        "validateNodeCount" : {
          "type" : "boolean",
          "description" : "validate node count during downscale"
        },
        "forced" : {
          "type" : "boolean",
          "description" : "Force remove host"
        }
      }
    },
    "HostGroupV4Request" : {
      "type" : "object",
      "required" : [ "hostCount", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        },
        "recipeNames" : {
          "type" : "array",
          "description" : "referenced recipe ids",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "recoveryMode" : {
          "type" : "string",
          "description" : "recovery mode of the hostgroup's nodes",
          "enum" : [ "MANUAL", "AUTO" ]
        },
        "instanceGroupName" : {
          "type" : "string",
          "description" : "name of an instance group where the hostgroup will be deployed"
        },
        "recipes" : {
          "type" : "array",
          "description" : "referenced recipes",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/RecipeV4Request"
          }
        },
        "hostCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of hosts in the hostgroup"
        }
      }
    },
    "RecipeV4Request" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "type" : {
          "type" : "string",
          "description" : "type of recipe [PRE_CLOUDERA_MANAGER_START,PRE_TERMINATION,POST_CLOUDERA_MANAGER_START,POST_CLUSTER_INSTALL]. The default is PRE_CLOUDERA_MANAGER_START",
          "enum" : [ "PRE_CLOUDERA_MANAGER_START", "PRE_TERMINATION", "POST_CLOUDERA_MANAGER_START", "POST_CLUSTER_INSTALL" ]
        },
        "content" : {
          "type" : "string",
          "description" : "content of recipe"
        }
      },
      "description" : "A recipe is a script that runs on all nodes of a selected node group at a specific time. You can use recipes for tasks such as installing additional software or performing advanced cluster configuration. For example, you can use a recipe to put a JAR file on the Hadoop classpath."
    },
    "UpdateClusterV4Request" : {
      "type" : "object",
      "properties" : {
        "hostGroupAdjustment" : {
          "description" : "host group adjustment",
          "$ref" : "#/definitions/HostGroupAdjustmentV4Request"
        },
        "status" : {
          "type" : "string",
          "description" : "request status",
          "enum" : [ "SYNC", "FULL_SYNC", "REPAIR_FAILED_NODES", "STOPPED", "STARTED" ]
        },
        "userNamePassword" : {
          "description" : "user details",
          "$ref" : "#/definitions/UserNamePasswordV4Request"
        },
        "blueprintName" : {
          "type" : "string",
          "description" : "blueprint id for the cluster"
        },
        "validateBlueprint" : {
          "type" : "boolean",
          "description" : "blueprint validation"
        },
        "hostgroups" : {
          "type" : "array",
          "description" : "collection of hostgroups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HostGroupV4Request"
          }
        }
      }
    },
    "UserNamePasswordV4Request" : {
      "type" : "object",
      "required" : [ "oldPassword", "password", "userName" ],
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "new user name in ambari",
          "minLength" : 1,
          "maxLength" : 2147483647
        },
        "oldPassword" : {
          "type" : "string",
          "description" : "old password in ambari",
          "minLength" : 1,
          "maxLength" : 2147483647
        },
        "password" : {
          "type" : "string",
          "description" : "new password in ambari",
          "minLength" : 1,
          "maxLength" : 2147483647
        }
      }
    },
    "AutoscaleStackV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "tenant" : {
          "type" : "string",
          "description" : "name of the tenant"
        },
        "workspaceId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the workspace"
        },
        "userId" : {
          "type" : "string",
          "description" : "id of the user"
        },
        "userCrn" : {
          "type" : "string",
          "description" : "crn of the user"
        },
        "stackId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the stack"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "gatewayPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "port of the gateway secured proxy"
        },
        "clusterManagerIp" : {
          "type" : "string",
          "description" : "public ambari ip of the stack"
        },
        "userNamePath" : {
          "type" : "string",
          "description" : "ambari username"
        },
        "passwordPath" : {
          "type" : "string",
          "description" : "ambari password"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the stack",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "clusterStatus" : {
          "type" : "string",
          "description" : "status of the cluster",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "creation time of the stack in long"
        },
        "clusterManagerVariant" : {
          "type" : "string",
          "description" : "Cluster manager variant"
        },
        "stackCrn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "cloudPlatform" : {
          "type" : "string",
          "description" : "Cloudplatform of the stack"
        },
        "stackType" : {
          "type" : "string",
          "description" : "the typeof the resource",
          "enum" : [ "WORKLOAD", "DATALAKE", "TEMPLATE" ]
        },
        "tunnel" : {
          "type" : "string",
          "description" : "Configuration that the connection going directly or with cluster proxy or with ccm and cluster proxy.",
          "enum" : [ "DIRECT", "CCM", "CLUSTER_PROXY" ]
        }
      }
    },
    "AutoscaleStackV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AutoscaleStackV4Response"
          }
        }
      }
    },
    "AuthorizeForAutoscaleV4Response" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean"
        }
      }
    },
    "StackStatusV4Response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "statusReason" : {
          "type" : "string"
        },
        "clusterStatus" : {
          "type" : "string",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "clusterStatusReason" : {
          "type" : "string"
        },
        "crn" : {
          "type" : "string"
        }
      }
    },
    "AutoscaleRecommendationV4Response" : {
      "type" : "object",
      "properties" : {
        "timeBasedHostGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "loadBasedHostGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "InstanceGroupAdjustmentV4Request" : {
      "type" : "object",
      "required" : [ "instanceGroup", "scalingAdjustment" ],
      "properties" : {
        "instanceGroup" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "scalingAdjustment" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "scaling adjustment of the instance groups"
        }
      }
    },
    "UpdateStackV4Request" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "status of the scale request",
          "enum" : [ "SYNC", "FULL_SYNC", "REPAIR_FAILED_NODES", "STOPPED", "STARTED" ]
        },
        "withClusterEvent" : {
          "type" : "boolean",
          "description" : "on stack update, update cluster too"
        },
        "instanceGroupAdjustment" : {
          "description" : "instance group adjustment",
          "$ref" : "#/definitions/InstanceGroupAdjustmentV4Request"
        }
      }
    },
    "ClusterProxyConfiguration" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "CertificateV4Response" : {
      "type" : "object",
      "properties" : {
        "serverCert" : {
          "type" : "string",
          "description" : "server certificate used by the gateway"
        },
        "clientKeyPath" : {
          "type" : "string",
          "description" : "client key used by the gateway"
        },
        "clientCertPath" : {
          "type" : "string",
          "description" : "client certificate used by the gateway"
        }
      }
    },
    "AccountMappingBase" : {
      "type" : "object",
      "properties" : {
        "groupMappings" : {
          "type" : "object",
          "description" : "group mappings",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "userMappings" : {
          "type" : "object",
          "description" : "user mappings",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "AdlsCloudStorageV1Parameters" : {
      "type" : "object",
      "required" : [ "accountName", "clientId", "credential" ],
      "properties" : {
        "accountName" : {
          "type" : "string"
        },
        "clientId" : {
          "type" : "string"
        },
        "credential" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        }
      }
    },
    "AdlsGen2CloudStorageV1Parameters" : {
      "type" : "object",
      "properties" : {
        "accountKey" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "managedIdentity" : {
          "type" : "string"
        },
        "secure" : {
          "type" : "boolean"
        }
      }
    },
    "AnonymizationRule" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "replacement" : {
          "type" : "string"
        }
      }
    },
    "AttachedClusterInfoV4Response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        }
      }
    },
    "AwsEncryptionV4Parameters" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "encryption type for vm (DEFAULT|CUSTOM|NONE)",
          "enum" : [ "DEFAULT", "NONE", "CUSTOM" ]
        },
        "key" : {
          "type" : "string",
          "description" : "encryption key for vm"
        }
      }
    },
    "AwsInstanceGroupV4Parameters" : {
      "type" : "object"
    },
    "AwsInstanceTemplateV4Parameters" : {
      "type" : "object",
      "properties" : {
        "spot" : {
          "description" : "aws specific spot instance parameters for template",
          "$ref" : "#/definitions/AwsInstanceTemplateV4SpotParameters"
        },
        "encryption" : {
          "description" : "encryption for vm",
          "$ref" : "#/definitions/AwsEncryptionV4Parameters"
        }
      }
    },
    "AwsInstanceTemplateV4SpotParameters" : {
      "type" : "object",
      "properties" : {
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "percentage of spot instances launched in instance group",
          "minimum" : 0,
          "maximum" : 100
        }
      }
    },
    "AwsNetworkV4Parameters" : {
      "type" : "object",
      "properties" : {
        "vpcId" : {
          "type" : "string"
        },
        "internetGatewayId" : {
          "type" : "string"
        },
        "subnetId" : {
          "type" : "string"
        }
      }
    },
    "AwsStackV4Parameters" : {
      "type" : "object"
    },
    "AwsStorageParameters" : {
      "type" : "object",
      "properties" : {
        "s3Guard" : {
          "$ref" : "#/definitions/S3Guard"
        }
      }
    },
    "AzureAvailabiltySetV4" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "faultDomainCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "updateDomainCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AzureInstanceGroupV4Parameters" : {
      "type" : "object",
      "properties" : {
        "availabilitySet" : {
          "$ref" : "#/definitions/AzureAvailabiltySetV4"
        }
      }
    },
    "AzureInstanceTemplateV4Parameters" : {
      "type" : "object",
      "properties" : {
        "privateId" : {
          "type" : "string",
          "description" : "private id for azure"
        },
        "encrypted" : {
          "type" : "boolean"
        },
        "managedDisk" : {
          "type" : "boolean"
        }
      }
    },
    "AzureNetworkV4Parameters" : {
      "type" : "object",
      "properties" : {
        "noPublicIp" : {
          "type" : "boolean"
        },
        "resourceGroupName" : {
          "type" : "string"
        },
        "networkId" : {
          "type" : "string"
        },
        "subnetId" : {
          "type" : "string"
        }
      }
    },
    "AzureStackV4Parameters" : {
      "type" : "object",
      "properties" : {
        "resourceGroupName" : {
          "type" : "string"
        },
        "encryptStorage" : {
          "type" : "boolean"
        }
      }
    },
    "BlueprintV4Response" : {
      "type" : "object",
      "required" : [ "crn", "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "blueprint" : {
          "type" : "string",
          "description" : "blueprint, set this or the url field"
        },
        "tags" : {
          "type" : "object",
          "description" : "user defined tags for blueprint",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "^[^;\\/%]*$"
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "hostGroupCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of host groups"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the blueprint",
          "enum" : [ "DEFAULT", "DEFAULT_DELETED", "USER_MANAGED", "OUTDATED" ]
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CloudStorageResponse" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "$ref" : "#/definitions/AwsStorageParameters"
        },
        "locations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageLocationBase"
          }
        },
        "identities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageIdentityBase"
          }
        },
        "accountMapping" : {
          "description" : "cloud storage account mapping",
          "$ref" : "#/definitions/AccountMappingBase"
        }
      }
    },
    "CloudbreakDetailsV4Response" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "version of the Cloudbreak that provisioned the stack"
        }
      }
    },
    "CloudbreakEventV4Response" : {
      "type" : "object",
      "properties" : {
        "eventType" : {
          "type" : "string",
          "description" : "type of the event"
        },
        "eventTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "timestamp of the event"
        },
        "eventMessage" : {
          "type" : "string",
          "description" : "message of the event"
        },
        "userId" : {
          "type" : "string",
          "description" : "User ID in the new authorization model"
        },
        "notificationType" : {
          "type" : "string",
          "description" : "Type of the notification to be identifiable by the UI"
        },
        "cloud" : {
          "type" : "string",
          "description" : "type of cloud provider"
        },
        "region" : {
          "type" : "string",
          "description" : "region of the stack"
        },
        "availabilityZone" : {
          "type" : "string",
          "description" : "availability zone of the stack"
        },
        "blueprintId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "blueprint id for the cluster"
        },
        "blueprintName" : {
          "type" : "string",
          "description" : "gathered from blueprintName field from the blueprint"
        },
        "clusterId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the cluster"
        },
        "clusterName" : {
          "type" : "string",
          "description" : "name of the cluster"
        },
        "stackCrn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "stackName" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "stackStatus" : {
          "type" : "string",
          "description" : "status of the stack",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of nodes"
        },
        "instanceGroup" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "clusterStatus" : {
          "type" : "string",
          "description" : "status of the cluster",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "workspaceId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Workspace ID of the resource"
        },
        "tenantName" : {
          "type" : "string",
          "description" : "name of the current tenant"
        },
        "ldapDetails" : {
          "$ref" : "#/definitions/LdapDetails"
        },
        "rdsDetails" : {
          "$ref" : "#/definitions/RdsDetails"
        }
      }
    },
    "ClouderaManagerProductV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the Cloudera manager product"
        },
        "version" : {
          "type" : "string",
          "description" : "version of the Cloudera manager product"
        },
        "parcel" : {
          "type" : "string",
          "description" : "parcel url of the Cloudera manager product"
        },
        "csd" : {
          "type" : "array",
          "description" : "CSD (service descriptor) urls for the Cloudera manager product",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ClouderaManagerRepositoryV4Response" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "version of the cluster manager"
        },
        "baseUrl" : {
          "type" : "string",
          "description" : "url of the cluster manager repository"
        },
        "gpgKeyUrl" : {
          "type" : "string",
          "description" : "gpg key of the cluster manager repository"
        }
      }
    },
    "ClouderaManagerV4Response" : {
      "type" : "object",
      "properties" : {
        "repository" : {
          "description" : "details of the Cloudera Manager package repository",
          "$ref" : "#/definitions/ClouderaManagerRepositoryV4Response"
        },
        "products" : {
          "type" : "array",
          "description" : "list of Cloudera Manager product detials",
          "items" : {
            "$ref" : "#/definitions/ClouderaManagerProductV4Response"
          }
        },
        "enableAutoTls" : {
          "type" : "boolean",
          "description" : "Enable autotls on clusters generated by Cloudera Manager"
        }
      }
    },
    "CloudwatchParams" : {
      "type" : "object",
      "required" : [ "instanceProfile" ],
      "properties" : {
        "instanceProfile" : {
          "type" : "string"
        },
        "region" : {
          "type" : "string",
          "description" : "telemetry - CloudWatch related AWS region (should be used only outside of AWS platform)"
        },
        "streamKey" : {
          "type" : "string",
          "description" : "telemetry - CloudWatch releated parameters",
          "enum" : [ "HOSTNAME", "COMPONENT" ]
        }
      }
    },
    "ClusterExposedServiceV4Response" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "knoxService" : {
          "type" : "string"
        },
        "serviceUrl" : {
          "type" : "string"
        },
        "open" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string",
          "enum" : [ "SSO_PROVIDER", "SSO_PROVIDER_FROM_UMS", "NONE", "PAM" ]
        }
      }
    },
    "ClusterV4Response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the cluster",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "hoursUp" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "duration - how long the cluster is running in hours"
        },
        "minutesUp" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "duration - how long the cluster is running in minutes (minus hours)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource"
        },
        "statusReason" : {
          "type" : "string",
          "description" : "status message of the cluster"
        },
        "databases" : {
          "type" : "array",
          "description" : "Database configurations for the cluster",
          "items" : {
            "$ref" : "#/definitions/DatabaseV4Response"
          }
        },
        "proxyConfigCrn" : {
          "type" : "string",
          "description" : "proxy CRN for the cluster"
        },
        "proxyConfigName" : {
          "type" : "string"
        },
        "cloudStorage" : {
          "description" : "filesystem for a specific stack",
          "$ref" : "#/definitions/CloudStorageResponse"
        },
        "cm" : {
          "$ref" : "#/definitions/ClouderaManagerV4Response"
        },
        "gateway" : {
          "$ref" : "#/definitions/GatewayV4Response"
        },
        "attributes" : {
          "type" : "object",
          "description" : "Additional information for ambari cluster",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "customContainers" : {
          "description" : "custom containers",
          "$ref" : "#/definitions/CustomContainerV4Response"
        },
        "customQueue" : {
          "type" : "string",
          "description" : "custom queue for yarn orchestrator"
        },
        "creationFinished" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Epoch time of cluster creation finish"
        },
        "uptime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "duration - how long the cluster is running in milliseconds"
        },
        "exposedServices" : {
          "type" : "object",
          "description" : "cluster exposed services for topologies",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ClusterExposedServiceV4Response"
            }
          }
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        },
        "cmMgmtUser" : {
          "description" : "CM username for shared usage",
          "$ref" : "#/definitions/SecretResponse"
        },
        "cmMgmtPassword" : {
          "description" : "CM password for shared usage",
          "$ref" : "#/definitions/SecretResponse"
        },
        "blueprint" : {
          "description" : "blueprint for the cluster",
          "$ref" : "#/definitions/BlueprintV4Response"
        },
        "extendedBlueprintText" : {
          "type" : "string",
          "description" : "blueprint, set this or the url field"
        },
        "serverIp" : {
          "type" : "string",
          "description" : "public ambari ip of the stack"
        },
        "serverFqdn" : {
          "type" : "string",
          "description" : "FQDN of the gateway node for the stack"
        },
        "serverUrl" : {
          "type" : "string",
          "description" : "public ambari url"
        },
        "databaseServerCrn" : {
          "type" : "string",
          "description" : "Contains valid Crn for a redbeams database server"
        },
        "rangerRazEnabled" : {
          "type" : "boolean",
          "description" : "Enables Ranger Raz for the cluster on ADLSv2."
        }
      }
    },
    "CustomContainerV4Response" : {
      "type" : "object",
      "properties" : {
        "definitions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CustomDomainSettingsV4Response" : {
      "type" : "object",
      "properties" : {
        "domainName" : {
          "type" : "string",
          "description" : "custom domain name for the nodes in the stack"
        },
        "hostname" : {
          "type" : "string",
          "description" : "custom hostname for nodes in the stack"
        },
        "clusterNameAsSubdomain" : {
          "type" : "boolean",
          "description" : "using the cluster name to create subdomain"
        },
        "hostgroupNameAsHostname" : {
          "type" : "boolean",
          "description" : "using the hostgroup names to create hostnames"
        }
      }
    },
    "DatabaseResponse" : {
      "type" : "object",
      "required" : [ "availabilityType" ],
      "properties" : {
        "availabilityType" : {
          "type" : "string",
          "enum" : [ "NONE", "NON_HA", "HA" ]
        }
      }
    },
    "DatabaseV4Response" : {
      "type" : "object",
      "required" : [ "connectionDriver", "connectionURL", "databaseEngine", "databaseEngineDisplayName", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the RDS configuration resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "connectionURL" : {
          "type" : "string",
          "description" : "JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of RDS, aka the service name that will use the RDS like HIVE, DRUID, SUPERSET, RANGER, etc."
        },
        "connectorJarUrl" : {
          "type" : "string",
          "description" : "URL that points to the jar of the connection driver(connector)"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "creationDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "creation time of the resource in long"
        },
        "clusterNames" : {
          "type" : "array",
          "description" : "list of clusters which use config",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "databaseEngine" : {
          "type" : "string",
          "description" : "Name of the external database engine (MYSQL, POSTGRES...)"
        },
        "connectionDriver" : {
          "type" : "string",
          "description" : "Name of the JDBC connection driver (for example: 'org.postgresql.Driver')"
        },
        "databaseEngineDisplayName" : {
          "type" : "string",
          "description" : "Display name of the external database engine (Mysql, PostgreSQL...)"
        },
        "connectionUserName" : {
          "description" : "Username to use for the jdbc connection",
          "$ref" : "#/definitions/SecretResponse"
        },
        "connectionPassword" : {
          "description" : "Password to use for the jdbc connection",
          "$ref" : "#/definitions/SecretResponse"
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        }
      }
    },
    "FeatureSetting" : {
      "type" : "object",
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "enabled"
        }
      }
    },
    "FeaturesResponse" : {
      "type" : "object",
      "properties" : {
        "workloadAnalytics" : {
          "description" : "Workload analytics (telemetry) settings.",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "clusterLogsCollection" : {
          "description" : "enable cluster logs collection",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "monitoring" : {
          "description" : "enable monitoring for cluster services",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "metering" : {
          "description" : "Telemetry metering feature setting",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "useSharedAltusCredential" : {
          "description" : "enable shared Altus credential usage",
          "$ref" : "#/definitions/FeatureSetting"
        }
      }
    },
    "FlowIdentifier" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "FLOW", "FLOW_CHAIN", "NOT_TRIGGERED" ]
        },
        "pollableId" : {
          "type" : "string"
        }
      }
    },
    "GatewayTopologyV4Response" : {
      "type" : "object",
      "properties" : {
        "topologyName" : {
          "type" : "string",
          "description" : "Knox topology name"
        },
        "exposedServices" : {
          "type" : "array",
          "description" : "exposed Knox services - those services that should be accessible through Knox gateway.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GatewayV4Response" : {
      "type" : "object",
      "properties" : {
        "topologies" : {
          "type" : "array",
          "description" : "Topology definitions of the gateway.",
          "items" : {
            "$ref" : "#/definitions/GatewayTopologyV4Response"
          }
        },
        "tokenCert" : {
          "type" : "string",
          "description" : "SSO Provider certificate"
        },
        "gatewayType" : {
          "type" : "string",
          "description" : "Knox gateway type",
          "enum" : [ "CENTRAL", "INDIVIDUAL" ]
        },
        "ssoType" : {
          "type" : "string",
          "description" : "Knox SSO type",
          "enum" : [ "SSO_PROVIDER", "NONE" ]
        }
      }
    },
    "GcpEncryptionV4Parameters" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "encryption type for vm (DEFAULT|CUSTOM|NONE)",
          "enum" : [ "DEFAULT", "NONE", "CUSTOM" ]
        },
        "key" : {
          "type" : "string",
          "description" : "encryption key for vm"
        },
        "keyEncryptionMethod" : {
          "type" : "string",
          "description" : "encryption method for the key (RAW|RSA)",
          "enum" : [ "RAW", "RSA", "KMS" ]
        }
      }
    },
    "GcpInstanceGroupV4Parameters" : {
      "type" : "object",
      "properties" : {
        "opId" : {
          "type" : "string"
        }
      }
    },
    "GcpInstanceTemplateV4Parameters" : {
      "type" : "object",
      "properties" : {
        "encryption" : {
          "description" : "encryption for vm",
          "$ref" : "#/definitions/GcpEncryptionV4Parameters"
        },
        "preemptible" : {
          "type" : "boolean"
        }
      }
    },
    "GcpNetworkV4Parameters" : {
      "type" : "object",
      "properties" : {
        "networkId" : {
          "type" : "string"
        },
        "subnetId" : {
          "type" : "string"
        },
        "sharedProjectId" : {
          "type" : "string"
        },
        "noPublicIp" : {
          "type" : "boolean"
        },
        "noFirewallRules" : {
          "type" : "boolean"
        }
      }
    },
    "GcpStackV4Parameters" : {
      "type" : "object"
    },
    "GcsCloudStorageV1Parameters" : {
      "type" : "object",
      "required" : [ "serviceAccountEmail" ],
      "properties" : {
        "serviceAccountEmail" : {
          "type" : "string"
        }
      }
    },
    "HardwareInfoGroupV4Response" : {
      "type" : "object",
      "properties" : {
        "recoveryMode" : {
          "type" : "string",
          "description" : "recovery mode of the hostgroup's nodes",
          "enum" : [ "MANUAL", "AUTO" ]
        },
        "name" : {
          "type" : "string"
        },
        "hardwareInfos" : {
          "type" : "array",
          "description" : "Metadata of instances.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HardwareInfoV4Response"
          }
        }
      }
    },
    "HardwareInfoV4Response" : {
      "type" : "object",
      "required" : [ "groupName", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        },
        "groupName" : {
          "type" : "string",
          "description" : "name of the host group"
        },
        "state" : {
          "type" : "string",
          "description" : "state of the host"
        },
        "privateIp" : {
          "type" : "string",
          "description" : "private ip of the insctance"
        },
        "publicIp" : {
          "type" : "string",
          "description" : "public ip of the instance"
        },
        "sshPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "instanceId" : {
          "type" : "string",
          "description" : "id of the instance"
        },
        "ambariServer" : {
          "type" : "boolean",
          "description" : "ambari server address"
        },
        "discoveryFQDN" : {
          "type" : "string",
          "description" : "the fully qualified domain name of the node in the service discovery cluster"
        },
        "instanceGroup" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "instanceStatus" : {
          "type" : "string",
          "description" : "status of the instance",
          "enum" : [ "REQUESTED", "FAILED", "CREATED", "ORCHESTRATION_FAILED", "SERVICES_RUNNING", "SERVICES_HEALTHY", "SERVICES_UNHEALTHY", "WAITING_FOR_REPAIR", "STOPPED", "DELETED_ON_PROVIDER_SIDE", "DELETED_BY_PROVIDER", "DELETE_REQUESTED", "DECOMMISSIONED", "DECOMMISSION_FAILED", "TERMINATED" ]
        },
        "instanceMetadataType" : {
          "type" : "string",
          "description" : "type of the instance",
          "enum" : [ "GATEWAY", "GATEWAY_PRIMARY", "CORE" ]
        },
        "imageName" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string"
        },
        "osType" : {
          "type" : "string"
        },
        "imageCatalogUrl" : {
          "type" : "string"
        },
        "imageId" : {
          "type" : "string"
        },
        "imageCatalogName" : {
          "type" : "string"
        },
        "packageVersions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "template" : {
          "description" : "instancegroup related template",
          "$ref" : "#/definitions/InstanceTemplateV4Response"
        }
      }
    },
    "InstanceGroupV4Response" : {
      "type" : "object",
      "required" : [ "name", "nodeCount" ],
      "properties" : {
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of nodes",
          "minimum" : 0,
          "maximum" : 100000
        },
        "name" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the instance group, default value is CORE",
          "enum" : [ "CORE", "GATEWAY" ]
        },
        "azure" : {
          "description" : "azure specific parameters for instance group",
          "$ref" : "#/definitions/AzureInstanceGroupV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for instance group",
          "$ref" : "#/definitions/GcpInstanceGroupV4Parameters"
        },
        "aws" : {
          "description" : "aws specific parameters for instance group",
          "$ref" : "#/definitions/AwsInstanceGroupV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for instance group",
          "$ref" : "#/definitions/OpenStackInstanceGroupV4Parameters"
        },
        "recoveryMode" : {
          "type" : "string",
          "description" : "recovery mode of the hostgroup's nodes",
          "enum" : [ "MANUAL", "AUTO" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "metadata" : {
          "type" : "array",
          "description" : "metadata of instances",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/InstanceMetaDataV4Response"
          }
        },
        "template" : {
          "description" : "instancegroup related template",
          "$ref" : "#/definitions/InstanceTemplateV4Response"
        },
        "securityGroup" : {
          "description" : "instancegroup related securitygroup",
          "$ref" : "#/definitions/SecurityGroupV4Response"
        },
        "recipes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RecipeV4Response"
          }
        }
      }
    },
    "InstanceMetaDataV4Response" : {
      "type" : "object",
      "properties" : {
        "privateIp" : {
          "type" : "string",
          "description" : "private ip of the insctance"
        },
        "publicIp" : {
          "type" : "string",
          "description" : "public ip of the instance"
        },
        "sshPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "instanceId" : {
          "type" : "string",
          "description" : "id of the instance"
        },
        "ambariServer" : {
          "type" : "boolean",
          "description" : "ambari server address"
        },
        "discoveryFQDN" : {
          "type" : "string",
          "description" : "the fully qualified domain name of the node in the service discovery cluster"
        },
        "instanceGroup" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "instanceStatus" : {
          "type" : "string",
          "description" : "status of the instance",
          "enum" : [ "REQUESTED", "FAILED", "CREATED", "ORCHESTRATION_FAILED", "SERVICES_RUNNING", "SERVICES_HEALTHY", "SERVICES_UNHEALTHY", "WAITING_FOR_REPAIR", "STOPPED", "DELETED_ON_PROVIDER_SIDE", "DELETED_BY_PROVIDER", "DELETE_REQUESTED", "DECOMMISSIONED", "DECOMMISSION_FAILED", "TERMINATED" ]
        },
        "instanceType" : {
          "type" : "string",
          "description" : "type of the instance",
          "enum" : [ "GATEWAY", "GATEWAY_PRIMARY", "CORE" ]
        },
        "state" : {
          "type" : "string",
          "description" : "state of the host"
        },
        "statusReason" : {
          "type" : "string",
          "description" : "reason of the state"
        },
        "mountedVolumes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MountedVolumeV4Response"
          }
        },
        "lifeCycle" : {
          "type" : "string",
          "enum" : [ "NORMAL", "SPOT" ]
        }
      }
    },
    "InstanceTemplateV4Response" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "description" : "aws specific parameters for template",
          "$ref" : "#/definitions/AwsInstanceTemplateV4Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for template",
          "$ref" : "#/definitions/AzureInstanceTemplateV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for template",
          "$ref" : "#/definitions/GcpInstanceTemplateV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for template",
          "$ref" : "#/definitions/OpenStackInstanceTemplateV4Parameters"
        },
        "yarn" : {
          "description" : "yarn specific parameters for template",
          "$ref" : "#/definitions/YarnInstanceTemplateV4Parameters"
        },
        "mock" : {
          "description" : "yarn specific parameters for template",
          "$ref" : "#/definitions/MockInstanceTemplateV4Parameters"
        },
        "instanceType" : {
          "type" : "string",
          "description" : "type of the instance"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "rootVolume" : {
          "$ref" : "#/definitions/RootVolumeV4Response"
        },
        "ephemeralVolume" : {
          "$ref" : "#/definitions/VolumeV4Response"
        },
        "attachedVolumes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VolumeV4Response"
          }
        }
      }
    },
    "LoggingResponse" : {
      "type" : "object",
      "required" : [ "storageLocation" ],
      "properties" : {
        "storageLocation" : {
          "type" : "string",
          "description" : "telemetry - logging storage location / container"
        },
        "s3" : {
          "description" : "telemetry - logging s3 attributes",
          "$ref" : "#/definitions/S3CloudStorageV1Parameters"
        },
        "adlsGen2" : {
          "description" : "telemetry - logging adls gen2 attributes",
          "$ref" : "#/definitions/AdlsGen2CloudStorageV1Parameters"
        },
        "cloudwatch" : {
          "description" : "telemetry - logging cloudwatch attributes",
          "$ref" : "#/definitions/CloudwatchParams"
        }
      }
    },
    "MockInstanceTemplateV4Parameters" : {
      "type" : "object"
    },
    "MountedVolumeV4Response" : {
      "type" : "object",
      "properties" : {
        "volumeId" : {
          "type" : "string"
        },
        "device" : {
          "type" : "string"
        },
        "volumeType" : {
          "type" : "string"
        },
        "volumeSize" : {
          "type" : "string"
        }
      }
    },
    "NetworkV4Response" : {
      "type" : "object",
      "properties" : {
        "subnetCIDR" : {
          "type" : "string",
          "description" : "the subnet definition of the network in CIDR format"
        },
        "aws" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AwsNetworkV4Parameters"
        },
        "gcp" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/GcpNetworkV4Parameters"
        },
        "azure" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AzureNetworkV4Parameters"
        },
        "openstack" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/OpenStackNetworkV4Parameters"
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource",
          "readOnly" : true
        }
      }
    },
    "OpenStackInstanceGroupV4Parameters" : {
      "type" : "object",
      "properties" : {
        "server" : {
          "type" : "string"
        }
      }
    },
    "OpenStackInstanceTemplateV4Parameters" : {
      "type" : "object"
    },
    "OpenStackNetworkV4Parameters" : {
      "type" : "object",
      "properties" : {
        "networkId" : {
          "type" : "string"
        },
        "routerId" : {
          "type" : "string"
        },
        "subnetId" : {
          "type" : "string"
        },
        "publicNetId" : {
          "type" : "string"
        },
        "networkingOption" : {
          "type" : "string"
        }
      }
    },
    "OpenStackStackV4Parameters" : {
      "type" : "object"
    },
    "PlacementSettingsV4Response" : {
      "type" : "object",
      "required" : [ "region" ],
      "properties" : {
        "availabilityZone" : {
          "type" : "string",
          "description" : "availability zone of the stack"
        },
        "region" : {
          "type" : "string",
          "description" : "region of the stack"
        }
      }
    },
    "RecipeV4Response" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "type" : {
          "type" : "string",
          "description" : "type of recipe [PRE_CLOUDERA_MANAGER_START,PRE_TERMINATION,POST_CLOUDERA_MANAGER_START,POST_CLUSTER_INSTALL]. The default is PRE_CLOUDERA_MANAGER_START",
          "enum" : [ "PRE_CLOUDERA_MANAGER_START", "PRE_TERMINATION", "POST_CLOUDERA_MANAGER_START", "POST_CLUSTER_INSTALL" ]
        },
        "content" : {
          "type" : "string",
          "description" : "content of recipe"
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        },
        "creator" : {
          "type" : "string",
          "description" : "the creator of the resource"
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "description" : "A recipe is a script that runs on all nodes of a selected node group at a specific time. You can use recipes for tasks such as installing additional software or performing advanced cluster configuration. For example, you can use a recipe to put a JAR file on the Hadoop classpath."
    },
    "RootVolumeV4Response" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of the root volume"
        }
      }
    },
    "S3CloudStorageV1Parameters" : {
      "type" : "object",
      "required" : [ "instanceProfile" ],
      "properties" : {
        "instanceProfile" : {
          "type" : "string"
        }
      }
    },
    "S3Guard" : {
      "type" : "object",
      "properties" : {
        "dynamoTableName" : {
          "type" : "string"
        }
      }
    },
    "SecretResponse" : {
      "type" : "object",
      "properties" : {
        "enginePath" : {
          "type" : "string",
          "description" : "Engine path of the secret."
        },
        "secretPath" : {
          "type" : "string",
          "description" : "Path of the secret."
        }
      }
    },
    "SecurityGroupV4Response" : {
      "type" : "object",
      "properties" : {
        "securityGroupIds" : {
          "type" : "array",
          "description" : "Exisiting security group ids",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "securityRules" : {
          "type" : "array",
          "description" : "list of security rules that relates to the security group",
          "items" : {
            "$ref" : "#/definitions/SecurityRuleV4Response"
          }
        }
      }
    },
    "SecurityRuleV4Response" : {
      "type" : "object",
      "required" : [ "ports", "protocol", "subnet" ],
      "properties" : {
        "subnet" : {
          "type" : "string",
          "description" : "definition of allowed subnet in CIDR format"
        },
        "ports" : {
          "type" : "array",
          "description" : "list of accessible ports",
          "items" : {
            "type" : "string"
          }
        },
        "protocol" : {
          "type" : "string",
          "description" : "protocol of the rule"
        },
        "modifiable" : {
          "type" : "boolean",
          "description" : "flag for making the rule modifiable"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        }
      }
    },
    "SharedServiceV4Response" : {
      "type" : "object",
      "properties" : {
        "sharedClusterName" : {
          "type" : "string"
        },
        "sharedClusterId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sdxName" : {
          "type" : "string"
        },
        "sdxCrn" : {
          "type" : "string"
        },
        "attachedClusters" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/AttachedClusterInfoV4Response"
          }
        }
      }
    },
    "StackAuthenticationV4Response" : {
      "type" : "object",
      "properties" : {
        "publicKey" : {
          "type" : "string",
          "description" : "public key for accessing instances",
          "minLength" : 0,
          "maxLength" : 2048
        },
        "publicKeyId" : {
          "type" : "string",
          "description" : "public key id for accessing instances",
          "minLength" : 0,
          "maxLength" : 255
        },
        "loginUserName" : {
          "type" : "string",
          "description" : "authentication name for machines",
          "minLength" : 0,
          "maxLength" : 32
        }
      }
    },
    "StackImageV4Response" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the image"
        },
        "catalogUrl" : {
          "type" : "string",
          "description" : "url of the image catalog"
        },
        "id" : {
          "type" : "string",
          "description" : "id of the image"
        },
        "catalogName" : {
          "type" : "string",
          "description" : "name of the image catalog"
        }
      }
    },
    "StackV4Response" : {
      "type" : "object",
      "required" : [ "name", "placement" ],
      "properties" : {
        "cloudPlatform" : {
          "type" : "string",
          "description" : "Cloudplatform of the stack",
          "enum" : [ "AWS", "GCP", "AZURE", "OPENSTACK", "YARN", "MOCK" ]
        },
        "name" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "aws" : {
          "description" : "aws specific parameters for stack",
          "$ref" : "#/definitions/AwsStackV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for stack",
          "$ref" : "#/definitions/GcpStackV4Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for stack",
          "$ref" : "#/definitions/AzureStackV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for stack",
          "$ref" : "#/definitions/OpenStackStackV4Parameters"
        },
        "yarn" : {
          "description" : "openstack specific parameters for stack",
          "$ref" : "#/definitions/YarnStackV4Parameters"
        },
        "timeToLive" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "crn" : {
          "type" : "string"
        },
        "environmentCrn" : {
          "type" : "string"
        },
        "environmentName" : {
          "type" : "string"
        },
        "credentialName" : {
          "type" : "string"
        },
        "credentialCrn" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the stack",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "cluster" : {
          "description" : "cluster object on stack",
          "$ref" : "#/definitions/ClusterV4Response"
        },
        "statusReason" : {
          "type" : "string",
          "description" : "status message of the stack"
        },
        "network" : {
          "description" : "stack related network",
          "$ref" : "#/definitions/NetworkV4Response"
        },
        "instanceGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupV4Response"
          }
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "creation time of the stack in long"
        },
        "terminated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "termination completion time of stack in long"
        },
        "gatewayPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "port of the gateway secured proxy"
        },
        "image" : {
          "description" : "image of the stack",
          "$ref" : "#/definitions/StackImageV4Response"
        },
        "cloudbreakDetails" : {
          "description" : "details of the Cloudbreak that provisioned the stack",
          "$ref" : "#/definitions/CloudbreakDetailsV4Response"
        },
        "authentication" : {
          "description" : "stack related authentication",
          "$ref" : "#/definitions/StackAuthenticationV4Response"
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "node count of the stack"
        },
        "hardwareInfoGroups" : {
          "type" : "array",
          "description" : "hardware information where pairing hostmetadata with instancemetadata",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HardwareInfoGroupV4Response"
          }
        },
        "cloudbreakEvents" : {
          "type" : "array",
          "description" : "related events for a cloudbreak stack",
          "items" : {
            "$ref" : "#/definitions/CloudbreakEventV4Response"
          }
        },
        "tags" : {
          "description" : "stack related tags",
          "$ref" : "#/definitions/TagsV4Response"
        },
        "telemetry" : {
          "description" : "stack related telemetry settings",
          "$ref" : "#/definitions/TelemetryResponse"
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        },
        "customDomains" : {
          "$ref" : "#/definitions/CustomDomainSettingsV4Response"
        },
        "placement" : {
          "description" : "placement configuration parameters for a cluster (e.g. 'region', 'availabilityZone')",
          "$ref" : "#/definitions/PlacementSettingsV4Response"
        },
        "sharedService" : {
          "description" : "Shared service request",
          "$ref" : "#/definitions/SharedServiceV4Response"
        },
        "tunnel" : {
          "type" : "string",
          "description" : "Configuration that the connection going directly or with cluster proxy or with ccm and cluster proxy.",
          "enum" : [ "DIRECT", "CCM", "CLUSTER_PROXY" ]
        },
        "flowIdentifier" : {
          "description" : "Flow identifier for the current stack creation. Only returned during the stack create request/response.",
          "$ref" : "#/definitions/FlowIdentifier"
        },
        "externalDatabase" : {
          "description" : "External database parameters for the stack.",
          "$ref" : "#/definitions/DatabaseResponse"
        }
      }
    },
    "StorageIdentityBase" : {
      "type" : "object",
      "properties" : {
        "adls" : {
          "$ref" : "#/definitions/AdlsCloudStorageV1Parameters"
        },
        "wasb" : {
          "$ref" : "#/definitions/WasbCloudStorageV1Parameters"
        },
        "gcs" : {
          "$ref" : "#/definitions/GcsCloudStorageV1Parameters"
        },
        "s3" : {
          "$ref" : "#/definitions/S3CloudStorageV1Parameters"
        },
        "adlsGen2" : {
          "$ref" : "#/definitions/AdlsGen2CloudStorageV1Parameters"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ID_BROKER", "LOG" ]
        }
      }
    },
    "StorageLocationBase" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ZEPPELIN_NOTEBOOK", "YARN_LOG", "HIVE_METASTORE_WAREHOUSE", "HIVE_METASTORE_EXTERNAL_WAREHOUSE", "HIVE_REPLICA_WAREHOUSE", "HBASE_ROOT", "RANGER_AUDIT", "PROFILER_SERVICE_FS_URI", "DEFAULT_FS" ]
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "TagsV4Response" : {
      "type" : "object",
      "properties" : {
        "application" : {
          "type" : "object",
          "description" : "stack related application tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "userDefined" : {
          "type" : "object",
          "description" : "stack related userdefined tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaults" : {
          "type" : "object",
          "description" : "stack related default tags",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "TelemetryResponse" : {
      "type" : "object",
      "properties" : {
        "fluentAttributes" : {
          "type" : "object",
          "description" : "Telemetry fluent settings (overrides).",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "logging" : {
          "description" : "Cloud Logging (telemetry) settings.",
          "$ref" : "#/definitions/LoggingResponse"
        },
        "workloadAnalytics" : {
          "description" : "Workload analytics (telemetry) settings.",
          "$ref" : "#/definitions/WorkloadAnalyticsResponse"
        },
        "features" : {
          "description" : "Telemetry features settings",
          "$ref" : "#/definitions/FeaturesResponse"
        },
        "rules" : {
          "type" : "array",
          "description" : "Telemetry anonymization rules (persistent on cluster level) that are applied on shipped logs.",
          "items" : {
            "$ref" : "#/definitions/AnonymizationRule"
          }
        }
      }
    },
    "VolumeV4Response" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of volumes"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the volumes"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of volume"
        }
      }
    },
    "WasbCloudStorageV1Parameters" : {
      "type" : "object",
      "required" : [ "accountKey", "accountName" ],
      "properties" : {
        "accountKey" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        },
        "secure" : {
          "type" : "boolean"
        }
      }
    },
    "WorkloadAnalyticsResponse" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "type" : "object",
          "description" : "Workload analytics (telemetry) attributes.",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "WorkspaceResourceV4Response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the workspace"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the workspace"
        }
      }
    },
    "YarnInstanceTemplateV4Parameters" : {
      "type" : "object",
      "properties" : {
        "memory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cpus" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "YarnStackV4Parameters" : {
      "type" : "object",
      "properties" : {
        "yarnQueue" : {
          "type" : "string"
        },
        "lifetime" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "BlueprintServicesV4Response" : {
      "type" : "object",
      "properties" : {
        "services" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SupportedServiceV4Response"
          }
        }
      }
    },
    "SupportedServiceV4Response" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        }
      }
    },
    "SupportedVersionV4Response" : {
      "type" : "object",
      "properties" : {
        "services" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SupportedServiceV4Response"
          }
        },
        "version" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "SupportedVersionsV4Response" : {
      "type" : "object",
      "properties" : {
        "supportedVersions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SupportedVersionV4Response"
          }
        }
      }
    },
    "DiskV4Response" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        }
      }
    },
    "GatewayRecommendationV4Response" : {
      "type" : "object",
      "properties" : {
        "hostGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "InstanceCountV4Response" : {
      "type" : "object",
      "properties" : {
        "minimumCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maximumCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "RecommendationV4Response" : {
      "type" : "object",
      "properties" : {
        "recommendations" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VmTypeV4Response"
          }
        },
        "virtualMachines" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VmTypeV4Response"
          }
        },
        "diskResponses" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/DiskV4Response"
          }
        },
        "instanceCounts" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InstanceCountV4Response"
          }
        },
        "gatewayRecommendation" : {
          "$ref" : "#/definitions/GatewayRecommendationV4Response"
        },
        "autoscaleRecommendation" : {
          "$ref" : "#/definitions/AutoscaleRecommendationV4Response"
        },
        "resizeRecommendation" : {
          "$ref" : "#/definitions/ResizeRecommendationV4Response"
        }
      }
    },
    "ResizeRecommendationV4Response" : {
      "type" : "object",
      "properties" : {
        "scaleUpHostGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "scaleDownHostGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "VmTypeMetaJson" : {
      "type" : "object",
      "properties" : {
        "configs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VolumeParameterConfigV4Response"
          }
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "VmTypeV4Response" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "vmTypeMetaJson" : {
          "$ref" : "#/definitions/VmTypeMetaJson"
        }
      }
    },
    "VolumeParameterConfigV4Response" : {
      "type" : "object",
      "properties" : {
        "volumeParameterType" : {
          "type" : "string"
        },
        "minimumSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maximumSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minimumNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maximumNumber" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ServiceDependencyMatrixV4Response" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "services" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GeneratedCmTemplateV4Response" : {
      "type" : "object",
      "properties" : {
        "template" : {
          "type" : "string"
        }
      }
    },
    "BlueprintV4Request" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "blueprint" : {
          "type" : "string",
          "description" : "blueprint, set this or the url field"
        },
        "tags" : {
          "type" : "object",
          "description" : "user defined tags for blueprint",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "^[^;\\/%]*$"
        },
        "url" : {
          "type" : "string",
          "description" : "url source of a blueprint, set this or the blueprint field"
        },
        "services" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "platform" : {
          "type" : "string"
        }
      }
    },
    "BlueprintV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BlueprintV4Response"
          }
        }
      }
    },
    "CreateClusterTemplateRequest" : {
      "type" : "object",
      "properties" : {
        "clusterTemplateName" : {
          "type" : "string"
        },
        "clusterTemplateContent" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DatahubResourceTagRequest"
          }
        }
      }
    },
    "DatahubResourceTagRequest" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "BlueprintV4ViewResponse" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "^[^;\\/%]*$"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "stackType" : {
          "type" : "string",
          "description" : "The type of the stack: for example HDP or HDF"
        },
        "stackVersion" : {
          "type" : "string",
          "description" : "The version of the stack"
        },
        "hostGroupCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of host groups"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the blueprint",
          "enum" : [ "DEFAULT", "DEFAULT_DELETED", "USER_MANAGED", "OUTDATED" ]
        },
        "tags" : {
          "type" : "object",
          "description" : "user defined tags for blueprint",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "BlueprintV4ViewResponses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BlueprintV4ViewResponse"
          }
        }
      }
    },
    "ParametersQueryV4Response" : {
      "type" : "object",
      "required" : [ "custom" ],
      "properties" : {
        "custom" : {
          "type" : "object",
          "description" : "AmbariKerberosDescriptor parameters as a json",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CloudbreakInfoResponse" : {
      "type" : "object",
      "properties" : {
        "info" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "AwsDistroXV1Parameters" : {
      "type" : "object"
    },
    "AwsEncryptionV1Parameters" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "encryption type for vm (DEFAULT|CUSTOM|NONE)",
          "enum" : [ "DEFAULT", "NONE", "CUSTOM" ]
        },
        "key" : {
          "type" : "string",
          "description" : "encryption key for vm"
        }
      }
    },
    "AwsInstanceGroupV1Parameters" : {
      "type" : "object"
    },
    "AwsInstanceTemplateV1Parameters" : {
      "type" : "object",
      "properties" : {
        "spot" : {
          "description" : "aws specific spot instance parameters for template",
          "$ref" : "#/definitions/AwsInstanceTemplateV1SpotParameters"
        },
        "encryption" : {
          "description" : "encryption for vm",
          "$ref" : "#/definitions/AwsEncryptionV1Parameters"
        }
      }
    },
    "AwsInstanceTemplateV1SpotParameters" : {
      "type" : "object",
      "properties" : {
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "percentage of spot instances launched in instance group",
          "minimum" : 0,
          "maximum" : 100
        }
      }
    },
    "AwsNetworkV1Parameters" : {
      "type" : "object",
      "properties" : {
        "subnetId" : {
          "type" : "string"
        }
      }
    },
    "AzureAvailabiltySetV1Parameters" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "faultDomainCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "updateDomainCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AzureDistroXV1Parameters" : {
      "type" : "object",
      "properties" : {
        "resourceGroupName" : {
          "type" : "string"
        },
        "encryptStorage" : {
          "type" : "boolean"
        }
      }
    },
    "AzureInstanceGroupV1Parameters" : {
      "type" : "object",
      "properties" : {
        "availabilitySet" : {
          "$ref" : "#/definitions/AzureAvailabiltySetV1Parameters"
        }
      }
    },
    "AzureInstanceTemplateV1Parameters" : {
      "type" : "object",
      "properties" : {
        "privateId" : {
          "type" : "string",
          "description" : "private id for azure"
        },
        "encrypted" : {
          "type" : "boolean"
        },
        "managedDisk" : {
          "type" : "boolean"
        }
      }
    },
    "AzureNetworkV1Parameters" : {
      "type" : "object",
      "properties" : {
        "subnetId" : {
          "type" : "string"
        }
      }
    },
    "CloudStorageRequest" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "$ref" : "#/definitions/AwsStorageParameters"
        },
        "locations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageLocationBase"
          }
        },
        "identities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageIdentityBase"
          }
        },
        "accountMapping" : {
          "description" : "cloud storage account mapping",
          "$ref" : "#/definitions/AccountMappingBase"
        }
      }
    },
    "ClouderaManagerProductV1Request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the Cloudera manager product"
        },
        "version" : {
          "type" : "string",
          "description" : "version of the Cloudera manager product"
        },
        "parcel" : {
          "type" : "string",
          "description" : "parcel url of the Cloudera manager product"
        },
        "csd" : {
          "type" : "array",
          "description" : "CSD (service descriptor) urls for the Cloudera manager product",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ClouderaManagerRepositoryV1Request" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "version of the cluster manager"
        },
        "baseUrl" : {
          "type" : "string",
          "description" : "url of the cluster manager repository"
        },
        "gpgKeyUrl" : {
          "type" : "string",
          "description" : "gpg key of the cluster manager repository"
        }
      }
    },
    "ClouderaManagerV1Request" : {
      "type" : "object",
      "required" : [ "enableAutoTls" ],
      "properties" : {
        "repository" : {
          "description" : "details of the Cloudera Manager package repository",
          "$ref" : "#/definitions/ClouderaManagerRepositoryV1Request"
        },
        "products" : {
          "type" : "array",
          "description" : "list of Cloudera Manager product detials",
          "items" : {
            "$ref" : "#/definitions/ClouderaManagerProductV1Request"
          }
        },
        "enableAutoTls" : {
          "type" : "boolean",
          "description" : "Enable autotls on clusters generated by Cloudera Manager"
        }
      }
    },
    "ClusterTemplateV4Response" : {
      "type" : "object",
      "required" : [ "distroXTemplate", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 40,
          "pattern" : "^[^;\\/%]*$"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "distroXTemplate" : {
          "description" : "stringified template JSON",
          "$ref" : "#/definitions/DistroXV1Request"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "SPARK", "HIVE", "EDW", "ETL", "DATASCIENCE", "DATAMART", "DATALAKE", "DATAENGINEERING", "DATAENGINEERING_HA", "STREAMING", "STREAMING_HA", "FLOW_MANAGEMENT", "FLOW_MANAGEMENT_HA", "OPERATIONALDATABASE", "DISCOVERY_DATA_AND_EXPLORATION", "OTHER" ]
        },
        "cloudPlatform" : {
          "type" : "string",
          "description" : "cloudplatform which this template is compatible with"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "DEFAULT_DELETED", "USER_MANAGED", "OUTDATED" ]
        },
        "datalakeRequired" : {
          "type" : "string",
          "description" : "datalake required which this template is compatible with. The default is OPTIONAL",
          "enum" : [ "NONE", "OPTIONAL", "REQUIRED" ]
        },
        "environmentCrn" : {
          "type" : "string"
        },
        "environmentName" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "featureState" : {
          "type" : "string",
          "enum" : [ "PREVIEW", "RELEASED" ]
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "node count of the cluster template"
        },
        "stackType" : {
          "type" : "string",
          "description" : "stack type of cluster template"
        },
        "stackVersion" : {
          "type" : "string",
          "description" : "stack version of cluster template"
        }
      }
    },
    "DistroXClusterV1Request" : {
      "type" : "object",
      "required" : [ "blueprintName", "password", "userName" ],
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "ambari username",
          "minLength" : 5,
          "maxLength" : 15,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "password" : {
          "type" : "string",
          "description" : "ambari password",
          "minLength" : 8,
          "maxLength" : 100
        },
        "databases" : {
          "type" : "array",
          "description" : "RDS configuration names for the cluster",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "proxy" : {
          "type" : "string",
          "description" : "proxy configuration name for the cluster"
        },
        "cloudStorage" : {
          "description" : "external cloud storage configuration",
          "$ref" : "#/definitions/CloudStorageRequest"
        },
        "cm" : {
          "description" : "cloudera manager specific requests",
          "$ref" : "#/definitions/ClouderaManagerV1Request"
        },
        "exposedServices" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "blueprintName" : {
          "type" : "string",
          "description" : "blueprint name for the cluster"
        },
        "validateBlueprint" : {
          "type" : "boolean",
          "description" : "blueprint validation"
        }
      }
    },
    "DistroXDatabaseRequest" : {
      "type" : "object",
      "required" : [ "availabilityType" ],
      "properties" : {
        "availabilityType" : {
          "type" : "string",
          "enum" : [ "NONE", "NON_HA", "HA" ]
        }
      }
    },
    "DistroXImageV1Request" : {
      "type" : "object",
      "properties" : {
        "catalog" : {
          "type" : "string",
          "description" : "custom image catalog URL"
        },
        "id" : {
          "type" : "string",
          "description" : "virtual machine image id from ImageCatalog, machines of the cluster will be started from this image"
        }
      }
    },
    "DistroXV1Request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "aws" : {
          "description" : "aws specific parameters for stack",
          "$ref" : "#/definitions/AwsDistroXV1Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for stack",
          "$ref" : "#/definitions/AzureDistroXV1Parameters"
        },
        "yarn" : {
          "$ref" : "#/definitions/YarnDistroXV1Parameters"
        },
        "timeToLive" : {
          "type" : "integer",
          "format" : "int64"
        },
        "environmentName" : {
          "type" : "string"
        },
        "instanceGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/InstanceGroupV1Request"
          }
        },
        "image" : {
          "$ref" : "#/definitions/DistroXImageV1Request"
        },
        "network" : {
          "$ref" : "#/definitions/NetworkV1Request"
        },
        "cluster" : {
          "$ref" : "#/definitions/DistroXClusterV1Request"
        },
        "sdx" : {
          "$ref" : "#/definitions/SdxV1Request"
        },
        "externalDatabase" : {
          "$ref" : "#/definitions/DistroXDatabaseRequest"
        },
        "tags" : {
          "$ref" : "#/definitions/TagsV1Request"
        },
        "inputs" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "cloudPlatform" : {
          "type" : "string",
          "enum" : [ "AWS", "GCP", "AZURE", "OPENSTACK", "YARN", "MOCK" ]
        }
      }
    },
    "InstanceGroupV1Request" : {
      "type" : "object",
      "required" : [ "name", "nodeCount", "template" ],
      "properties" : {
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of nodes",
          "minimum" : 0,
          "maximum" : 100000
        },
        "name" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the instance group, default value is CORE",
          "enum" : [ "CORE", "GATEWAY" ]
        },
        "azure" : {
          "description" : "azure specific parameters for instance group",
          "$ref" : "#/definitions/AzureInstanceGroupV1Parameters"
        },
        "aws" : {
          "description" : "aws specific parameters for instance group",
          "$ref" : "#/definitions/AwsInstanceGroupV1Parameters"
        },
        "yarn" : {
          "$ref" : "#/definitions/YarnInstanceGroupV1Parameters"
        },
        "recoveryMode" : {
          "type" : "string",
          "description" : "recovery mode of the hostgroup's nodes",
          "enum" : [ "MANUAL", "AUTO" ]
        },
        "template" : {
          "description" : "instancegroup related template",
          "$ref" : "#/definitions/InstanceTemplateV1Request"
        },
        "recipeNames" : {
          "type" : "array",
          "description" : "referenced recipe names",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "cloudPlatform" : {
          "type" : "string",
          "enum" : [ "AWS", "GCP", "AZURE", "OPENSTACK", "YARN", "MOCK" ]
        }
      }
    },
    "InstanceTemplateV1Request" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "description" : "aws specific parameters for template",
          "$ref" : "#/definitions/AwsInstanceTemplateV1Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for template",
          "$ref" : "#/definitions/AzureInstanceTemplateV1Parameters"
        },
        "yarn" : {
          "description" : "yarn specific parameters for template",
          "$ref" : "#/definitions/YarnInstanceTemplateV1Parameters"
        },
        "instanceType" : {
          "type" : "string",
          "description" : "type of the instance"
        },
        "rootVolume" : {
          "$ref" : "#/definitions/RootVolumeV1Request"
        },
        "ephemeralVolume" : {
          "$ref" : "#/definitions/VolumeV1Request"
        },
        "attachedVolumes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VolumeV1Request"
          }
        },
        "cloudPlatform" : {
          "type" : "string",
          "enum" : [ "AWS", "GCP", "AZURE", "OPENSTACK", "YARN", "MOCK" ]
        }
      }
    },
    "MockNetworkV1Parameters" : {
      "type" : "object",
      "properties" : {
        "subnetId" : {
          "type" : "string"
        },
        "internetGatewayId" : {
          "type" : "string"
        },
        "vpcId" : {
          "type" : "string"
        }
      }
    },
    "NetworkV1Request" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AwsNetworkV1Parameters"
        },
        "azure" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AzureNetworkV1Parameters"
        },
        "mock" : {
          "description" : "mock network parameters",
          "$ref" : "#/definitions/MockNetworkV1Parameters"
        }
      }
    },
    "RootVolumeV1Request" : {
      "type" : "object",
      "required" : [ "size" ],
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of the root volume"
        }
      }
    },
    "SdxV1Request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "TagsV1Request" : {
      "type" : "object",
      "properties" : {
        "application" : {
          "type" : "object",
          "description" : "stack related application tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "userDefined" : {
          "type" : "object",
          "description" : "stack related userdefined tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaults" : {
          "type" : "object",
          "description" : "stack related default tags",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "VolumeV1Request" : {
      "type" : "object",
      "required" : [ "size" ],
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of volume"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of volumes"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the volumes"
        }
      }
    },
    "YarnDistroXV1Parameters" : {
      "type" : "object",
      "properties" : {
        "yarnQueue" : {
          "type" : "string"
        },
        "lifetime" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "YarnInstanceGroupV1Parameters" : {
      "type" : "object"
    },
    "YarnInstanceTemplateV1Parameters" : {
      "type" : "object",
      "properties" : {
        "memory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cpus" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ClusterTemplateV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterTemplateV4Response"
          }
        }
      }
    },
    "ClusterTemplateV4Request" : {
      "type" : "object",
      "required" : [ "distroXTemplate", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 40,
          "pattern" : "^[^;\\/%]*$"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "distroXTemplate" : {
          "description" : "stringified template JSON",
          "$ref" : "#/definitions/DistroXV1Request"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "SPARK", "HIVE", "EDW", "ETL", "DATASCIENCE", "DATAMART", "DATALAKE", "DATAENGINEERING", "DATAENGINEERING_HA", "STREAMING", "STREAMING_HA", "FLOW_MANAGEMENT", "FLOW_MANAGEMENT_HA", "OPERATIONALDATABASE", "DISCOVERY_DATA_AND_EXPLORATION", "OTHER" ]
        },
        "cloudPlatform" : {
          "type" : "string",
          "description" : "cloudplatform which this template is compatible with"
        }
      }
    },
    "ClusterTemplateViewV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "DEFAULT_DELETED", "USER_MANAGED", "OUTDATED" ]
        },
        "datalakeRequired" : {
          "type" : "string",
          "description" : "datalake required which this template is compatible with",
          "enum" : [ "NONE", "OPTIONAL", "REQUIRED" ]
        },
        "type" : {
          "type" : "string",
          "description" : "type of the cluster template",
          "enum" : [ "SPARK", "HIVE", "EDW", "ETL", "DATASCIENCE", "DATAMART", "DATALAKE", "DATAENGINEERING", "DATAENGINEERING_HA", "STREAMING", "STREAMING_HA", "FLOW_MANAGEMENT", "FLOW_MANAGEMENT_HA", "OPERATIONALDATABASE", "DISCOVERY_DATA_AND_EXPLORATION", "OTHER" ]
        },
        "cloudPlatform" : {
          "type" : "string",
          "description" : "cloudplatform which this template is compatible with"
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "node count of the cluster template"
        },
        "stackType" : {
          "type" : "string",
          "description" : "stack type of cluster template"
        },
        "stackVersion" : {
          "type" : "string",
          "description" : "stack version of cluster template"
        },
        "environmentCrn" : {
          "type" : "string"
        },
        "environmentName" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "featureState" : {
          "type" : "string",
          "enum" : [ "PREVIEW", "RELEASED" ]
        }
      }
    },
    "ClusterTemplateViewV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClusterTemplateViewV4Response"
          }
        }
      }
    },
    "DatabaseV4Request" : {
      "type" : "object",
      "required" : [ "connectionPassword", "connectionURL", "connectionUserName", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the RDS configuration resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "connectionURL" : {
          "type" : "string",
          "description" : "JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of RDS, aka the service name that will use the RDS like HIVE, DRUID, SUPERSET, RANGER, etc."
        },
        "connectorJarUrl" : {
          "type" : "string",
          "description" : "URL that points to the jar of the connection driver(connector)"
        },
        "connectionUserName" : {
          "type" : "string",
          "description" : "Username to use for the jdbc connection"
        },
        "connectionPassword" : {
          "type" : "string",
          "description" : "Password to use for the jdbc connection"
        },
        "oracle" : {
          "description" : "Oracle specific properties",
          "$ref" : "#/definitions/OracleParameters"
        }
      }
    },
    "OracleParameters" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "Version of the Database"
        }
      }
    },
    "DatabaseV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DatabaseV4Response"
          }
        }
      }
    },
    "ClusterViewV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the cluster",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "hostGroups" : {
          "type" : "array",
          "description" : "collection of hostgroups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HostGroupViewV4Response"
          }
        },
        "sharedServiceResponse" : {
          "description" : "shared service for a specific stack",
          "$ref" : "#/definitions/SharedServiceV4Response"
        },
        "blueprint" : {
          "description" : "blueprint for the cluster",
          "$ref" : "#/definitions/BlueprintV4ViewResponse"
        },
        "serverIp" : {
          "type" : "string",
          "description" : "public ambari ip of the stack"
        }
      }
    },
    "HostGroupViewV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        },
        "metadata" : {
          "type" : "array",
          "description" : "metadata of hosts",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HostMetadataViewV4Response"
          }
        }
      }
    },
    "HostMetadataViewV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "state" : {
          "type" : "string",
          "description" : "state of the host"
        },
        "statusReason" : {
          "type" : "string",
          "description" : "reason of the state"
        }
      }
    },
    "StackViewV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "hdpVersion" : {
          "type" : "string",
          "description" : "specific version of HDP"
        },
        "cluster" : {
          "description" : "cluster object on stack",
          "$ref" : "#/definitions/ClusterViewV4Response"
        },
        "status" : {
          "type" : "string",
          "description" : "status of the stack",
          "enum" : [ "REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETED_ON_PROVIDER_SIDE", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED", "AMBIGUOUS", "EXTERNAL_DATABASE_CREATION_IN_PROGRESS", "EXTERNAL_DATABASE_CREATION_FAILED", "EXTERNAL_DATABASE_DELETION_IN_PROGRESS", "EXTERNAL_DATABASE_DELETION_FINISHED", "EXTERNAL_DATABASE_DELETION_FAILED" ]
        },
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "node count of the stack"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "creation time of the stack in long"
        },
        "terminated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "termination completion time of stack in long"
        },
        "user" : {
          "description" : "the related user",
          "$ref" : "#/definitions/UserViewV4Response"
        },
        "environmentCrn" : {
          "type" : "string",
          "description" : "CRN of the environment which the stack is assigned to"
        },
        "environmentName" : {
          "type" : "string"
        },
        "credentialName" : {
          "type" : "string"
        },
        "cloudPlatform" : {
          "type" : "string",
          "description" : "Cloudplatform of the stack"
        },
        "tunnel" : {
          "type" : "string",
          "description" : "Configuration that the connection going directly or with cluster proxy or with ccm and cluster proxy.",
          "enum" : [ "DIRECT", "CCM", "CLUSTER_PROXY" ]
        }
      }
    },
    "StackViewV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StackViewV4Response"
          }
        }
      }
    },
    "UserViewV4Response" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "userCrn" : {
          "type" : "string"
        }
      }
    },
    "StructuredEventContainer" : {
      "type" : "object",
      "properties" : {
        "flow" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StructuredFlowEvent"
          }
        },
        "rest" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StructuredRestCallEvent"
          }
        },
        "notification" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StructuredNotificationEvent"
          }
        }
      }
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "first" : {
          "type" : "boolean"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "PageCloudbreakEventV4Response" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "first" : {
          "type" : "boolean"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean"
        },
        "pageable" : {
          "$ref" : "#/definitions/Pageable"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudbreakEventV4Response"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "Pageable" : {
      "type" : "object",
      "properties" : {
        "paged" : {
          "type" : "boolean"
        },
        "unpaged" : {
          "type" : "boolean"
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Sort" : {
      "type" : "object",
      "properties" : {
        "sorted" : {
          "type" : "boolean"
        },
        "unsorted" : {
          "type" : "boolean"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "CloudbreakEventV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudbreakEventV4Response"
          }
        }
      }
    },
    "FileSystemParameterV4Response" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "propertyName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "defaultPath" : {
          "type" : "string"
        },
        "relatedServices" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "relatedMissingServices" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "propertyFile" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        },
        "propertyDisplayName" : {
          "type" : "string"
        },
        "secure" : {
          "type" : "boolean"
        }
      }
    },
    "FileSystemParameterV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileSystemParameterV4Response"
          }
        }
      }
    },
    "BaseImageV4Response" : {
      "type" : "object",
      "properties" : {
        "cdhStacks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClouderaManagerStackDetailsV4Response"
          }
        },
        "clouderaManagerRepo" : {
          "$ref" : "#/definitions/ClouderaManagerRepositoryV4Response"
        },
        "date" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "description" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string"
        },
        "osType" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "cmBuildNumber" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "images" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "stackDetails" : {
          "$ref" : "#/definitions/BaseStackDetailsV4Response"
        },
        "preWarmParcels" : {
          "type" : "array",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "preWarmCsd" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultImage" : {
          "type" : "boolean"
        },
        "packageVersions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "BaseStackDetailsV4Response" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "stackBuildNumber" : {
          "type" : "string"
        }
      }
    },
    "ClouderaManagerStackDetailsV4Response" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "stackBuildNumber" : {
          "type" : "string"
        },
        "repository" : {
          "$ref" : "#/definitions/ClouderaManagerStackRepoDetailsV4Response"
        }
      }
    },
    "ClouderaManagerStackRepoDetailsV4Response" : {
      "type" : "object",
      "properties" : {
        "stack" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ImageCatalogV4Response" : {
      "type" : "object",
      "required" : [ "name", "url", "usedAsDefault" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "url" : {
          "type" : "string",
          "description" : "custom image catalog's URL"
        },
        "creator" : {
          "type" : "string",
          "description" : "the creator of the resource"
        },
        "usedAsDefault" : {
          "type" : "boolean",
          "description" : "true if image catalog is the default one"
        },
        "images" : {
          "description" : "image response in imagecatalog",
          "$ref" : "#/definitions/ImagesV4Response"
        },
        "workspace" : {
          "description" : "workspace of the resource",
          "$ref" : "#/definitions/WorkspaceResourceV4Response"
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "creation time of the resource in long"
        }
      }
    },
    "ImageV4Response" : {
      "type" : "object",
      "properties" : {
        "date" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "description" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string"
        },
        "osType" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "cmBuildNumber" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "images" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "stackDetails" : {
          "$ref" : "#/definitions/BaseStackDetailsV4Response"
        },
        "preWarmParcels" : {
          "type" : "array",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "preWarmCsd" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultImage" : {
          "type" : "boolean"
        },
        "packageVersions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ImagesV4Response" : {
      "type" : "object",
      "properties" : {
        "baseImages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BaseImageV4Response"
          }
        },
        "hdpImages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageV4Response"
          }
        },
        "hdfImages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageV4Response"
          }
        },
        "cdhImages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageV4Response"
          }
        },
        "supportedVersions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ImageCatalogV4Request" : {
      "type" : "object",
      "required" : [ "name", "url" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "url" : {
          "type" : "string",
          "description" : "custom image catalog's URL"
        },
        "creator" : {
          "type" : "string",
          "description" : "the creator of the resource"
        },
        "resourceCrn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        }
      }
    },
    "ImageCatalogV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageCatalogV4Response"
          }
        }
      }
    },
    "UpdateImageCatalogV4Request" : {
      "type" : "object",
      "required" : [ "crn", "name", "url" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "url" : {
          "type" : "string",
          "description" : "custom image catalog's URL"
        },
        "creator" : {
          "type" : "string",
          "description" : "the creator of the resource"
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        }
      }
    },
    "RecipeV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RecipeV4Response"
          }
        }
      }
    },
    "CreateRecipeRequest" : {
      "type" : "object",
      "properties" : {
        "recipeName" : {
          "type" : "string"
        },
        "recipeContent" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "RecipeViewV4Response" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        },
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "crn" : {
          "type" : "string",
          "description" : "the unique crn of the resource"
        },
        "type" : {
          "type" : "string",
          "description" : "type of recipe [PRE_CLOUDERA_MANAGER_START,PRE_TERMINATION,POST_CLOUDERA_MANAGER_START,POST_CLUSTER_INSTALL]. The default is PRE_CLOUDERA_MANAGER_START",
          "enum" : [ "PRE_CLOUDERA_MANAGER_START", "PRE_AMBARI_START", "PRE_TERMINATION", "POST_CLOUDERA_MANAGER_START", "POST_AMBARI_START", "POST_CLUSTER_INSTALL" ]
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "RecipeViewV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RecipeViewV4Response"
          }
        }
      }
    },
    "ClouderaManagerProductV4Request" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the Cloudera manager product"
        },
        "version" : {
          "type" : "string",
          "description" : "version of the Cloudera manager product"
        },
        "parcel" : {
          "type" : "string",
          "description" : "parcel url of the Cloudera manager product"
        },
        "csd" : {
          "type" : "array",
          "description" : "CSD (service descriptor) urls for the Cloudera manager product",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ClouderaManagerRepositoryV4Request" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "version of the cluster manager"
        },
        "baseUrl" : {
          "type" : "string",
          "description" : "url of the cluster manager repository"
        },
        "gpgKeyUrl" : {
          "type" : "string",
          "description" : "gpg key of the cluster manager repository"
        }
      }
    },
    "ClouderaManagerV4Request" : {
      "type" : "object",
      "required" : [ "enableAutoTls" ],
      "properties" : {
        "repository" : {
          "description" : "details of the Cloudera Manager package repository",
          "$ref" : "#/definitions/ClouderaManagerRepositoryV4Request"
        },
        "products" : {
          "type" : "array",
          "description" : "list of Cloudera Manager product detials",
          "items" : {
            "$ref" : "#/definitions/ClouderaManagerProductV4Request"
          }
        },
        "enableAutoTls" : {
          "type" : "boolean",
          "description" : "Enable autotls on clusters generated by Cloudera Manager"
        }
      }
    },
    "ClusterV4Request" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "ambari username",
          "minLength" : 5,
          "maxLength" : 15,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "password" : {
          "type" : "string",
          "description" : "ambari password",
          "minLength" : 8,
          "maxLength" : 100
        },
        "databases" : {
          "type" : "array",
          "description" : "RDS configuration names for the cluster",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "databaseServerCrn" : {
          "type" : "string",
          "description" : "Contains valid Crn for a redbeams database server"
        },
        "proxyConfigCrn" : {
          "type" : "string",
          "description" : "proxy CRN for the cluster"
        },
        "cloudStorage" : {
          "description" : "external cloud storage configuration",
          "$ref" : "#/definitions/CloudStorageRequest"
        },
        "cm" : {
          "description" : "cloudera manager specific requests",
          "$ref" : "#/definitions/ClouderaManagerV4Request"
        },
        "gateway" : {
          "$ref" : "#/definitions/GatewayV4Request"
        },
        "customContainer" : {
          "description" : "custom containers",
          "$ref" : "#/definitions/CustomContainerV4Request"
        },
        "customQueue" : {
          "type" : "string",
          "description" : "custom queue for yarn orchestrator"
        },
        "executorType" : {
          "type" : "string",
          "description" : "executor type of cluster",
          "enum" : [ "CONTAINER", "DEFAULT" ]
        },
        "blueprintName" : {
          "type" : "string",
          "description" : "blueprint name for the cluster"
        },
        "validateBlueprint" : {
          "type" : "boolean",
          "description" : "blueprint validation"
        },
        "rangerRazEnabled" : {
          "type" : "boolean",
          "description" : "Enables Ranger Raz for the cluster on ADLSv2."
        }
      }
    },
    "CustomContainerV4Request" : {
      "type" : "object",
      "properties" : {
        "definitions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CustomDomainSettingsV4Request" : {
      "type" : "object",
      "properties" : {
        "domainName" : {
          "type" : "string",
          "description" : "custom domain name for the nodes in the stack"
        },
        "hostname" : {
          "type" : "string",
          "description" : "custom hostname for nodes in the stack"
        },
        "clusterNameAsSubdomain" : {
          "type" : "boolean",
          "description" : "using the cluster name to create subdomain"
        },
        "hostgroupNameAsHostname" : {
          "type" : "boolean",
          "description" : "using the hostgroup names to create hostnames"
        }
      }
    },
    "DatabaseRequest" : {
      "type" : "object",
      "required" : [ "availabilityType" ],
      "properties" : {
        "availabilityType" : {
          "type" : "string",
          "enum" : [ "NONE", "NON_HA", "HA" ]
        }
      }
    },
    "FeaturesRequest" : {
      "type" : "object",
      "properties" : {
        "workloadAnalytics" : {
          "description" : "Workload analytics (telemetry) settings.",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "clusterLogsCollection" : {
          "description" : "enable cluster logs collection",
          "$ref" : "#/definitions/FeatureSetting"
        },
        "monitoring" : {
          "description" : "enable monitoring for cluster services",
          "$ref" : "#/definitions/FeatureSetting"
        }
      }
    },
    "GatewayTopologyV4Request" : {
      "type" : "object",
      "properties" : {
        "topologyName" : {
          "type" : "string",
          "description" : "Knox topology name"
        },
        "exposedServices" : {
          "type" : "array",
          "description" : "exposed Knox services - those services that should be accessible through Knox gateway.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GatewayV4Request" : {
      "type" : "object",
      "properties" : {
        "topologies" : {
          "type" : "array",
          "description" : "Topology definitions of the gateway.",
          "items" : {
            "$ref" : "#/definitions/GatewayTopologyV4Request"
          }
        },
        "tokenCert" : {
          "type" : "string",
          "description" : "SSO Provider certificate"
        },
        "gatewayType" : {
          "type" : "string",
          "description" : "Knox gateway type",
          "enum" : [ "CENTRAL", "INDIVIDUAL" ]
        },
        "ssoType" : {
          "type" : "string",
          "description" : "Knox SSO type",
          "enum" : [ "SSO_PROVIDER", "NONE" ]
        }
      }
    },
    "ImageSettingsV4Request" : {
      "type" : "object",
      "properties" : {
        "catalog" : {
          "type" : "string",
          "description" : "custom image catalog URL"
        },
        "id" : {
          "type" : "string",
          "description" : "virtual machine image id from ImageCatalog, machines of the cluster will be started from this image"
        },
        "os" : {
          "type" : "string",
          "description" : "os type of the image, this property is only considered when no specific image id is provided"
        }
      }
    },
    "InstanceGroupV4Request" : {
      "type" : "object",
      "required" : [ "name", "nodeCount", "template" ],
      "properties" : {
        "nodeCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of nodes",
          "minimum" : 0,
          "maximum" : 100000
        },
        "name" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the instance group, default value is CORE",
          "enum" : [ "CORE", "GATEWAY" ]
        },
        "azure" : {
          "description" : "azure specific parameters for instance group",
          "$ref" : "#/definitions/AzureInstanceGroupV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for instance group",
          "$ref" : "#/definitions/GcpInstanceGroupV4Parameters"
        },
        "aws" : {
          "description" : "aws specific parameters for instance group",
          "$ref" : "#/definitions/AwsInstanceGroupV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for instance group",
          "$ref" : "#/definitions/OpenStackInstanceGroupV4Parameters"
        },
        "recoveryMode" : {
          "type" : "string",
          "description" : "recovery mode of the hostgroup's nodes",
          "enum" : [ "MANUAL", "AUTO" ]
        },
        "template" : {
          "description" : "instancegroup related template",
          "$ref" : "#/definitions/InstanceTemplateV4Request"
        },
        "securityGroup" : {
          "description" : "instancegroup related securitygroup",
          "$ref" : "#/definitions/SecurityGroupV4Request"
        },
        "recipeNames" : {
          "type" : "array",
          "description" : "referenced recipe names",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "InstanceTemplateV4Request" : {
      "type" : "object",
      "properties" : {
        "aws" : {
          "description" : "aws specific parameters for template",
          "$ref" : "#/definitions/AwsInstanceTemplateV4Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for template",
          "$ref" : "#/definitions/AzureInstanceTemplateV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for template",
          "$ref" : "#/definitions/GcpInstanceTemplateV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for template",
          "$ref" : "#/definitions/OpenStackInstanceTemplateV4Parameters"
        },
        "yarn" : {
          "description" : "yarn specific parameters for template",
          "$ref" : "#/definitions/YarnInstanceTemplateV4Parameters"
        },
        "mock" : {
          "description" : "yarn specific parameters for template",
          "$ref" : "#/definitions/MockInstanceTemplateV4Parameters"
        },
        "instanceType" : {
          "type" : "string",
          "description" : "type of the instance"
        },
        "rootVolume" : {
          "$ref" : "#/definitions/RootVolumeV4Request"
        },
        "ephemeralVolume" : {
          "$ref" : "#/definitions/VolumeV4Request"
        },
        "attachedVolumes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VolumeV4Request"
          }
        }
      }
    },
    "LoggingRequest" : {
      "type" : "object",
      "required" : [ "storageLocation" ],
      "properties" : {
        "storageLocation" : {
          "type" : "string",
          "description" : "telemetry - logging storage location / container"
        },
        "s3" : {
          "description" : "telemetry - logging s3 attributes",
          "$ref" : "#/definitions/S3CloudStorageV1Parameters"
        },
        "adlsGen2" : {
          "description" : "telemetry - logging adls gen2 attributes",
          "$ref" : "#/definitions/AdlsGen2CloudStorageV1Parameters"
        },
        "cloudwatch" : {
          "description" : "telemetry - logging cloudwatch attributes",
          "$ref" : "#/definitions/CloudwatchParams"
        }
      }
    },
    "NetworkV4Request" : {
      "type" : "object",
      "properties" : {
        "subnetCIDR" : {
          "type" : "string",
          "description" : "the subnet definition of the network in CIDR format"
        },
        "aws" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AwsNetworkV4Parameters"
        },
        "gcp" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/GcpNetworkV4Parameters"
        },
        "azure" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/AzureNetworkV4Parameters"
        },
        "openstack" : {
          "description" : "provider specific parameters of the specified network",
          "$ref" : "#/definitions/OpenStackNetworkV4Parameters"
        }
      }
    },
    "PlacementSettingsV4Request" : {
      "type" : "object",
      "required" : [ "region" ],
      "properties" : {
        "availabilityZone" : {
          "type" : "string",
          "description" : "availability zone of the stack"
        },
        "region" : {
          "type" : "string",
          "description" : "region of the stack"
        }
      }
    },
    "RootVolumeV4Request" : {
      "type" : "object",
      "required" : [ "size" ],
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of the root volume"
        }
      }
    },
    "SecurityGroupV4Request" : {
      "type" : "object",
      "properties" : {
        "securityGroupIds" : {
          "type" : "array",
          "description" : "Exisiting security group ids",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "securityRules" : {
          "type" : "array",
          "description" : "list of security rules that relates to the security group",
          "items" : {
            "$ref" : "#/definitions/SecurityRuleV4Request"
          }
        }
      }
    },
    "SecurityRuleV4Request" : {
      "type" : "object",
      "required" : [ "ports", "protocol", "subnet" ],
      "properties" : {
        "subnet" : {
          "type" : "string",
          "description" : "definition of allowed subnet in CIDR format"
        },
        "ports" : {
          "type" : "array",
          "description" : "list of accessible ports",
          "items" : {
            "type" : "string"
          }
        },
        "protocol" : {
          "type" : "string",
          "description" : "protocol of the rule"
        },
        "modifiable" : {
          "type" : "boolean",
          "description" : "flag for making the rule modifiable"
        }
      }
    },
    "SharedServiceV4Request" : {
      "type" : "object",
      "required" : [ "datalakeName" ],
      "properties" : {
        "datalakeName" : {
          "type" : "string"
        },
        "runtimeVersion" : {
          "type" : "string"
        }
      }
    },
    "StackAuthenticationV4Request" : {
      "type" : "object",
      "properties" : {
        "publicKey" : {
          "type" : "string",
          "description" : "public key for accessing instances",
          "minLength" : 0,
          "maxLength" : 2048
        },
        "publicKeyId" : {
          "type" : "string",
          "description" : "public key id for accessing instances",
          "minLength" : 0,
          "maxLength" : 255
        },
        "loginUserName" : {
          "type" : "string",
          "description" : "authentication name for machines",
          "minLength" : 0,
          "maxLength" : 32
        }
      }
    },
    "StackV4Request" : {
      "type" : "object",
      "required" : [ "authentication", "environmentCrn", "instanceGroups", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the stack"
        },
        "aws" : {
          "description" : "aws specific parameters for stack",
          "$ref" : "#/definitions/AwsStackV4Parameters"
        },
        "gcp" : {
          "description" : "gcp specific parameters for stack",
          "$ref" : "#/definitions/GcpStackV4Parameters"
        },
        "azure" : {
          "description" : "azure specific parameters for stack",
          "$ref" : "#/definitions/AzureStackV4Parameters"
        },
        "openstack" : {
          "description" : "openstack specific parameters for stack",
          "$ref" : "#/definitions/OpenStackStackV4Parameters"
        },
        "yarn" : {
          "description" : "openstack specific parameters for stack",
          "$ref" : "#/definitions/YarnStackV4Parameters"
        },
        "timeToLive" : {
          "type" : "integer",
          "format" : "int64"
        },
        "environmentCrn" : {
          "type" : "string",
          "description" : "CRN of the environment which the stack is assigned to"
        },
        "customDomain" : {
          "description" : "settings related to custom domain names",
          "$ref" : "#/definitions/CustomDomainSettingsV4Request"
        },
        "tags" : {
          "description" : "stack related tags",
          "$ref" : "#/definitions/TagsV4Request"
        },
        "telemetry" : {
          "description" : "stack related telemetry settings",
          "$ref" : "#/definitions/TelemetryRequest"
        },
        "placement" : {
          "description" : "placement configuration parameters for a cluster (e.g. 'region', 'availabilityZone')",
          "$ref" : "#/definitions/PlacementSettingsV4Request"
        },
        "instanceGroups" : {
          "type" : "array",
          "description" : "collection of instance groupst",
          "items" : {
            "$ref" : "#/definitions/InstanceGroupV4Request"
          }
        },
        "authentication" : {
          "description" : "stack related authentication",
          "$ref" : "#/definitions/StackAuthenticationV4Request"
        },
        "network" : {
          "description" : "stack related network",
          "$ref" : "#/definitions/NetworkV4Request"
        },
        "image" : {
          "description" : "settings for custom images",
          "$ref" : "#/definitions/ImageSettingsV4Request"
        },
        "cluster" : {
          "description" : "cluster request object on stack",
          "$ref" : "#/definitions/ClusterV4Request"
        },
        "gatewayPort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "port of the gateway secured proxy",
          "minimum" : 1025,
          "maximum" : 65535
        },
        "type" : {
          "type" : "string",
          "enum" : [ "WORKLOAD", "DATALAKE", "TEMPLATE" ]
        },
        "sharedService" : {
          "description" : "Shared service request",
          "$ref" : "#/definitions/SharedServiceV4Request"
        },
        "inputs" : {
          "type" : "object",
          "description" : "dynamic properties",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "externalDatabase" : {
          "description" : "External database parameters for the stack.",
          "$ref" : "#/definitions/DatabaseRequest"
        },
        "resourceCrn" : {
          "type" : "string",
          "description" : "CRN of the cluster if there is corresponding cluster in another service (for example in SDX)"
        }
      }
    },
    "TagsV4Request" : {
      "type" : "object",
      "properties" : {
        "application" : {
          "type" : "object",
          "description" : "stack related application tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "userDefined" : {
          "type" : "object",
          "description" : "stack related userdefined tags",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaults" : {
          "type" : "object",
          "description" : "stack related default tags",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "TelemetryRequest" : {
      "type" : "object",
      "properties" : {
        "fluentAttributes" : {
          "type" : "object",
          "description" : "Telemetry fluent settings (overrides).",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "logging" : {
          "description" : "Cloud Logging (telemetry) settings.",
          "$ref" : "#/definitions/LoggingRequest"
        },
        "workloadAnalytics" : {
          "description" : "Workload analytics (telemetry) settings.",
          "$ref" : "#/definitions/WorkloadAnalyticsRequest"
        },
        "features" : {
          "description" : "Telemetry features settings",
          "$ref" : "#/definitions/FeaturesRequest"
        }
      }
    },
    "VolumeV4Request" : {
      "type" : "object",
      "required" : [ "size" ],
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "size of volume"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "number of volumes"
        },
        "type" : {
          "type" : "string",
          "description" : "type of the volumes"
        }
      }
    },
    "WorkloadAnalyticsRequest" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "type" : "object",
          "description" : "Workload analytics (telemetry) attributes.",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "StackScaleV4Request" : {
      "type" : "object",
      "required" : [ "desiredCount", "group" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "desiredCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "scaling adjustment of the instance groups"
        },
        "forced" : {
          "type" : "boolean",
          "description" : "Force remove instance"
        }
      }
    },
    "ClusterRepairNodesV4Request" : {
      "type" : "object",
      "properties" : {
        "deleteVolumes" : {
          "type" : "boolean",
          "description" : "If true, delete volumes, otherwise reattaches them to a newly created node instance."
        },
        "ids" : {
          "type" : "array",
          "description" : "Node ID list of nodes that need replacement.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ClusterRepairV4Request" : {
      "type" : "object",
      "required" : [ "hostGroups" ],
      "properties" : {
        "hostGroups" : {
          "type" : "array",
          "description" : "List of hostgroups where the failed nodes will be repaired",
          "items" : {
            "type" : "string"
          }
        },
        "nodes" : {
          "description" : "Object consisting of deleteVolumes flag and a list of node IDs which will be repaired specifically. The existing disk volumes on the nodes will be re-created if the deleteVolumes flag is true.",
          "$ref" : "#/definitions/ClusterRepairNodesV4Request"
        },
        "removeOnly" : {
          "type" : "boolean",
          "description" : "If true, the failed nodes will only be removed, otherwise the failed nodes will be removed and new nodes will be started."
        }
      }
    },
    "ImageComponentVersions" : {
      "type" : "object",
      "properties" : {
        "cm" : {
          "type" : "string"
        },
        "cmGBN" : {
          "type" : "string"
        },
        "cdp" : {
          "type" : "string"
        },
        "cdpGBN" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string"
        },
        "osPatchLevel" : {
          "type" : "string"
        }
      }
    },
    "ImageInfoV4Response" : {
      "type" : "object",
      "properties" : {
        "imageName" : {
          "type" : "string"
        },
        "imageId" : {
          "type" : "string"
        },
        "imageCatalogName" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "date" : {
          "type" : "string"
        },
        "componentVersions" : {
          "$ref" : "#/definitions/ImageComponentVersions"
        }
      }
    },
    "UpgradeOptionV4Response" : {
      "type" : "object",
      "properties" : {
        "current" : {
          "$ref" : "#/definitions/ImageInfoV4Response"
        },
        "upgrade" : {
          "$ref" : "#/definitions/ImageInfoV4Response"
        },
        "reason" : {
          "type" : "string"
        }
      }
    },
    "GeneratedBlueprintV4Response" : {
      "type" : "object",
      "properties" : {
        "blueprintText" : {
          "type" : "string",
          "description" : "blueprint, set this or the url field"
        }
      }
    },
    "StackImageChangeV4Request" : {
      "type" : "object",
      "required" : [ "imageId" ],
      "properties" : {
        "imageId" : {
          "type" : "string",
          "description" : "virtual machine image id from ImageCatalog, machines of the cluster will be started from this image",
          "minLength" : 1,
          "maxLength" : 2147483647
        },
        "imageCatalogName" : {
          "type" : "string",
          "description" : "custom image catalog URL"
        }
      }
    },
    "MaintenanceModeV4Request" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "maintenance mode status",
          "enum" : [ "ENABLED", "VALIDATION_REQUESTED", "DISABLED" ]
        }
      }
    },
    "RetryableFlowResponse" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the failed operation, that is also retryable."
        },
        "failDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Date when the operation went failed."
        }
      }
    },
    "UpgradeV4Response" : {
      "type" : "object",
      "properties" : {
        "current" : {
          "$ref" : "#/definitions/ImageInfoV4Response"
        },
        "upgradeCandidates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageInfoV4Response"
          }
        },
        "reason" : {
          "type" : "string"
        },
        "flowIdentifier" : {
          "$ref" : "#/definitions/FlowIdentifier"
        }
      }
    },
    "UpgradeV4Request" : {
      "type" : "object",
      "properties" : {
        "imageId" : {
          "type" : "string",
          "description" : "UUID of the image to upgrade"
        },
        "runtime" : {
          "type" : "string",
          "description" : "Cloudera Runtime version"
        },
        "lockComponents" : {
          "type" : "boolean",
          "description" : "Upgrades to image with the same version of stack and clustermanager, if available"
        },
        "dryRun" : {
          "type" : "boolean",
          "description" : "Checks the eligibility of an image to upgrade"
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "DurationV4Request" : {
      "type" : "object",
      "properties" : {
        "minutes" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 59
        },
        "hours" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 23
        },
        "days" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        }
      }
    },
    "ShowTerminatedClustersPreferencesV4Request" : {
      "type" : "object",
      "required" : [ "active" ],
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "timeout" : {
          "$ref" : "#/definitions/DurationV4Request"
        }
      }
    },
    "DurationV4Response" : {
      "type" : "object",
      "properties" : {
        "minutes" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 59
        },
        "hours" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 23
        },
        "days" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0
        }
      }
    },
    "ShowTerminatedClusterPreferencesV4Response" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "timeout" : {
          "$ref" : "#/definitions/DurationV4Response"
        }
      }
    },
    "UserProfileV4Response" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string"
        },
        "entitlements" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UserEvictV4Response" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        }
      }
    },
    "UserV4Response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        }
      }
    },
    "UserV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserV4Response"
          }
        }
      }
    },
    "ClouderaManagerInfoV4Response" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ClouderaManagerRepositoryV4Response"
          }
        }
      }
    },
    "ClouderaManagerStackDescriptorV4Response" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "minCM" : {
          "type" : "string"
        },
        "repository" : {
          "$ref" : "#/definitions/ClouderaManagerStackRepoDetailsV4Response"
        },
        "clouderaManager" : {
          "$ref" : "#/definitions/ClouderaManagerInfoV4Response"
        },
        "products" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClouderaManagerProductV4Response"
          }
        }
      }
    },
    "StackMatrixV4Response" : {
      "type" : "object",
      "properties" : {
        "cdh" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ClouderaManagerStackDescriptorV4Response"
          }
        }
      }
    },
    "CloudStorageSupportedV4Response" : {
      "type" : "object",
      "properties" : {
        "provider" : {
          "type" : "string"
        },
        "fileSystemType" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CloudStorageSupportedV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudStorageSupportedV4Response"
          }
        }
      }
    },
    "SecurityRulesV4Response" : {
      "type" : "object",
      "properties" : {
        "core" : {
          "type" : "array",
          "description" : "security rules for core type",
          "items" : {
            "$ref" : "#/definitions/SecurityRuleV4Response"
          }
        },
        "gateway" : {
          "type" : "array",
          "description" : "security rules for gateway type",
          "items" : {
            "$ref" : "#/definitions/SecurityRuleV4Response"
          }
        }
      }
    },
    "RenewCertificateV4Request" : {
      "type" : "object",
      "required" : [ "stackName" ],
      "properties" : {
        "stackName" : {
          "type" : "string"
        }
      }
    },
    "CheckRightV4Response" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CheckRightV4SingleResponse"
          }
        }
      }
    },
    "CheckRightV4SingleResponse" : {
      "type" : "object",
      "properties" : {
        "right" : {
          "type" : "string",
          "enum" : [ "DISTROX_READ", "DISTROX_WRITE", "SDX_READ", "SDX_WRITE", "ENVIRONMENT_READ", "ENVIRONMENT_WRITE" ]
        },
        "result" : {
          "type" : "boolean"
        }
      }
    },
    "CheckRightV4Request" : {
      "type" : "object",
      "properties" : {
        "rights" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "DISTROX_READ", "DISTROX_WRITE", "SDX_READ", "SDX_WRITE", "ENVIRONMENT_READ", "ENVIRONMENT_WRITE" ]
          }
        }
      }
    },
    "VersionCheckResult" : {
      "type" : "object",
      "properties" : {
        "versionCheckOk" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "RepoConfigValidationV4Response" : {
      "type" : "object",
      "properties" : {
        "ambariBaseUrl" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        },
        "ambariGpgKeyUrl" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        },
        "stackBaseURL" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        },
        "utilsBaseURL" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        },
        "versionDefinitionFileUrl" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        },
        "mpackUrl" : {
          "type" : "boolean",
          "description" : "Indicates the request's value with the same key is valid and reachable by Cloudbreak or not"
        }
      }
    },
    "RepoConfigValidationV4Request" : {
      "type" : "object",
      "properties" : {
        "ambariBaseUrl" : {
          "type" : "string",
          "description" : "url of the cluster manager repository"
        },
        "ambariGpgKeyUrl" : {
          "type" : "string",
          "description" : "gpg key of the cluster manager repository"
        },
        "stackBaseURL" : {
          "type" : "string",
          "description" : "url of the stack repository"
        },
        "utilsBaseURL" : {
          "type" : "string",
          "description" : "url of the stack utils repository"
        },
        "versionDefinitionFileUrl" : {
          "type" : "string",
          "description" : "local path on the Ambari server or URL that point to the desired VDF file"
        },
        "mpackUrl" : {
          "type" : "string",
          "description" : "url the MPACK that needs to be installed before HDF installation"
        }
      }
    },
    "DeploymentPreferencesV4Response" : {
      "type" : "object",
      "properties" : {
        "supportedExternalDatabases" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SupportedExternalDatabaseServiceEntryV4Response"
          }
        },
        "featureSwitchV4s" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "DISABLE_SHOW_CLI", "DISABLE_SHOW_BLUEPRINT" ]
          }
        },
        "platformSelectionDisabled" : {
          "type" : "boolean"
        },
        "platformEnablement" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "boolean"
          }
        }
      }
    },
    "SupportedDatabaseEntryV4Response" : {
      "type" : "object",
      "properties" : {
        "databaseName" : {
          "type" : "string",
          "description" : "Name of the database"
        },
        "displayName" : {
          "type" : "string",
          "description" : "Display name of the database"
        },
        "jdbcPrefix" : {
          "type" : "string",
          "description" : "Jdbc prefix of the database"
        },
        "versions" : {
          "type" : "array",
          "description" : "Supported version types currently only for Oracle",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SupportedExternalDatabaseServiceEntryV4Response" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the service"
        },
        "displayName" : {
          "type" : "string",
          "description" : "Display name of the service"
        },
        "databases" : {
          "type" : "array",
          "description" : "Supported database list",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SupportedDatabaseEntryV4Response"
          }
        }
      }
    },
    "ResourceEventResponse" : {
      "type" : "object",
      "properties" : {
        "event" : {
          "type" : "string",
          "description" : "related events for a cloudbreak stack",
          "enum" : [ "SDX_CLUSTER_CREATED", "SDX_CLUSTER_PROVISION_STARTED", "SDX_CLUSTER_PROVISION_FINISHED", "SDX_CLUSTER_DELETED", "SDX_CLUSTER_DELETION_STARTED", "SDX_CLUSTER_DELETION_FINISHED", "SDX_CLUSTER_DELETION_FAILED", "SDX_CLUSTER_DELETED_ON_PROVIDER_SIDE", "SDX_CLUSTER_CREATION_FAILED", "SDX_RDS_DELETION_STARTED", "SDX_RDS_DELETION_FAILED", "SDX_RDS_DELETION_FINISHED", "SDX_RDS_CREATION_STARTED", "SDX_RDS_CREATION_FAILED", "SDX_RDS_CREATION_FINISHED", "SDX_RDS_START_STARTED", "SDX_RDS_START_FAILED", "SDX_RDS_START_FINISHED", "SDX_RDS_STOP_STARTED", "SDX_RDS_STOP_FAILED", "SDX_RDS_STOP_FINISHED", "SDX_WAITING_FOR_ENVIRONMENT", "SDX_ENVIRONMENT_FINISHED", "SDX_REPAIR_STARTED", "SDX_REPAIR_FINISHED", "SDX_REPAIR_FAILED", "SDX_START_STARTED", "SDX_START_FINISHED", "SDX_START_FAILED", "SDX_STOP_STARTED", "SDX_STOP_FINISHED", "SDX_STOP_FAILED", "SDX_CHANGE_IMAGE_STARTED", "SDX_UPGRADE_STARTED", "SDX_UPGRADE_FINISHED", "SDX_UPGRADE_FAILED", "DATALAKE_UPGRADE_STARTED", "DATALAKE_UPGRADE_FINISHED", "DATALAKE_UPGRADE_FAILED", "SDX_SYNC_FAILED", "WORKSPACE_CREATED", "WORKSPACE_DELETED", "BLUEPRINT_CREATED", "BLUEPRINT_DELETED", "CREDENTIAL_CREATED", "CREDENTIAL_MODIFIED", "CREDENTIAL_DELETED", "CLUSTER_TEMPLATE_CREATED", "CLUSTER_TEMPLATE_DELETED", "LDAP_CREATED", "LDAP_DELETED", "IMAGE_CATALOG_CREATED", "IMAGE_CATALOG_DELETED", "NETWORK_CREATED", "NETWORK_DELETED", "RECIPE_CREATED", "RECIPE_DELETED", "RDS_CONFIG_CREATED", "RDS_CONFIG_DELETED", "PROXY_CONFIG_CREATED", "PROXY_CONFIG_DELETED", "SECURITY_GROUP_CREATED", "SECURITY_GROUP_DELETED", "TEMPLATE_CREATED", "TEMPLATE_DELETED", "TOPOLOGY_CREATED", "FILESYSTEM_CREATED", "FILESYSTEM_DELETED", "TOPOLOGY_DELETED", "MAINTENANCE_MODE_ENABLED", "MAINTENANCE_MODE_DISABLED", "TEST_CONNECTION_SUCCESS", "TEST_CONNECTION_FAILED", "ENVIRONMENT_INITIALIZATION_STARTED", "ENVIRONMENT_INITIALIZATION_FAILED", "ENVIRONMENT_VALIDATION_STARTED", "ENVIRONMENT_VALIDATION_FAILED", "ENVIRONMENT_PREREQUISITES_CREATE_STARTED", "ENVIRONMENT_PREREQUISITES_CREATE_FAILED", "ENVIRONMENT_NETWORK_CREATION_STARTED", "ENVIRONMENT_NETWORK_CREATION_FAILED", "ENVIRONMENT_PUBLICKEY_CREATION_STARTED", "ENVIRONMENT_PUBLICKEY_CREATION_FAILED", "ENVIRONMENT_FREEIPA_CREATION_STARTED", "ENVIRONMENT_FREEIPA_CREATION_FAILED", "ENVIRONMENT_CREATION_FINISHED", "ENVIRONMENT_CREATION_FAILED", "ENVIRONMENT_SYNC_FINISHED", "ENVIRONMENT_NETWORK_DELETION_STARTED", "ENVIRONMENT_PUBLICKEY_DELETION_STARTED", "ENVIRONMENT_CLUSTER_DEFINITION_DELETE_STARTED", "ENVIRONMENT_DATABASE_DELETION_STARTED", "ENVIRONMENT_FREEIPA_DELETION_STARTED", "ENVIRONMENT_IDBROKER_MAPPINGS_DELETION_STARTED", "ENVIRONMENT_S3GUARD_TABLE_DELETION_STARTED", "ENVIRONMENT_UMS_RESOURCE_DELETION_STARTED", "ENVIRONMENT_PREREQUISITES_DELETION_STARTED", "ENVIRONMENT_DATAHUB_CLUSTERS_DELETION_STARTED", "ENVIRONMENT_DATALAKE_CLUSTERS_DELETION_STARTED", "ENVIRONMENT_DELETION_FINISHED", "ENVIRONMENT_DELETION_FAILED", "ENVIRONMENT_STOP_DATAHUB_STARTED", "ENVIRONMENT_STOP_DATAHUB_FAILED", "ENVIRONMENT_STOP_DATALAKE_STARTED", "ENVIRONMENT_STOP_DATALAKE_FAILED", "ENVIRONMENT_STOP_FREEIPA_STARTED", "ENVIRONMENT_STOP_FREEIPA_FAILED", "ENVIRONMENT_STOPPED", "ENVIRONMENT_STOP_FAILED", "ENVIRONMENT_START_DATAHUB_STARTED", "ENVIRONMENT_START_DATAHUB_FAILED", "ENVIRONMENT_START_DATALAKE_STARTED", "ENVIRONMENT_START_DATALAKE_FAILED", "ENVIRONMENT_START_FREEIPA_STARTED", "ENVIRONMENT_START_FREEIPA_FAILED", "ENVIRONMENT_STARTED", "ENVIRONMENT_START_FAILED", "CREDENTIAL_AZURE_INTERACTIVE_CREATED", "CREDENTIAL_AZURE_INTERACTIVE_STATUS", "CREDENTIAL_AZURE_INTERACTIVE_FAILED", "STACK_STOP_IGNORED", "STACK_START_IGNORED", "STACK_STOP_REQUESTED", "STACK_CLEANUP_SERVICE_TRIGGER_SYNC", "STACK_SYNC_INSTANCE_STATUS_RETRIEVAL_FAILED", "STACK_SYNC_INSTANCE_STATUS_COULDNT_DETERMINE", "STACK_SYNC_INSTANCE_OPERATION_IN_PROGRESS", "STACK_SYNC_INSTANCE_STOPPED_ON_PROVIDER", "STACK_SYNC_INSTANCE_STATE_SYNCED", "STACK_SYNC_HOST_DELETED", "STACK_SYNC_INSTANCE_REMOVAL_FAILED", "STACK_SYNC_HOST_UPDATED", "STACK_SYNC_INSTANCE_TERMINATED", "STACK_SYNC_INSTANCE_DELETED_CBMETADATA", "STACK_SYNC_INSTANCE_DELETED_BY_PROVIDER_CBMETADATA", "STACK_DELETE_IN_PROGRESS", "STACK_ADDING_INSTANCES", "STACK_METADATA_EXTEND_WITH_COUNT", "STACK_INFRASTRUCTURE_UPDATE_FAILED", "STACK_IMAGE_UPDATE_STARTED", "STACK_IMAGE_UPDATE_FINISHED", "STACK_IMAGE_UPDATE_FAILED", "STACK_IMAGE_SETUP", "STACK_PROVISIONING", "STACK_INFRASTRUCTURE_TIME", "STACK_INFRASTRUCTURE_CREATE_FAILED", "STACK_INFRASTRUCTURE_ROLLBACK_FAILED", "STACK_REMOVING_INSTANCE", "STACK_SCALING_TERMINATING_HOST_FROM_HOSTGROUP", "STACK_REMOVING_INSTANCE_FINISHED", "STACK_REMOVING_INSTANCE_FAILED", "STACK_INFRASTRUCTURE_BOOTSTRAP", "STACK_GATEWAY_CERTIFICATE_CREATE_FAILED", "STACK_DOWNSCALE_INSTANCES", "STACK_DOWNSCALE_SUCCESS", "STACK_DOWNSCALE_FAILED", "STACK_SELECT_FOR_DOWNSCALE", "STACK_REPAIR_COMPLETE_CLEAN", "STACK_REPAIR_ATTEMPTING", "STACK_REPAIR_TRIGGERED", "STACK_DELETE_COMPLETED", "STACK_INFRASTRUCTURE_DELETE_FAILED", "STACK_FORCED_DELETE_COMPLETED", "STACK_INFRASTRUCTURE_STARTING", "STACK_INFRASTRUCTURE_STARTED", "STACK_INFRASTRUCTURE_STOPPING", "STACK_INFRASTRUCTURE_STOPPED", "STACK_INFRASTRUCTURE_START_FAILED", "STACK_INFRASTRUCTURE_STOP_FAILED", "STACK_REPAIR_DETECTION_STARTED", "STACK_REPAIR_FAILED", "STACK_DATALAKE_UPDATE", "STACK_DATALAKE_UPDATE_FINISHED", "STACK_DATALAKE_UPDATE_FAILED", "CLUSTER_BUILDING", "CLUSTER_RESET", "CLUSTER_BUILT", "CLUSTER_DELETE_FAILED", "CLUSTER_DELETE_STARTED", "CLUSTER_CHANGING_CREDENTIAL", "CLUSTER_CHANGED_CREDENTIAL", "CLUSTER_CREATE_FAILED", "CLUSTER_STARTING", "CLUSTER_DNS_ENTRY_UPDATE_FINISHED", "CLUSTER_STARTED", "CLUSTER_START_FAILED", "CLUSTER_CHANGE_CREDENTIAL_FAILED", "CLUSTER_SINGLE_MASTER_REPAIR_STARTED", "CLUSTER_SINGLE_MASTER_REPAIR_FINISHED", "CLUSTER_SCALING_UP", "CLUSTER_RE_REGISTER_WITH_CLUSTER_PROXY", "CLUSTER_SCALED_UP", "CLUSTER_RUN_SERVICES", "CLUSTER_RUN_CONTAINERS", "CLUSTER_GATEWAY_CHANGE_FAILED", "CLUSTER_GATEWAY_CHANGED_SUCCESSFULLY", "CLUSTER_GATEWAY_CHANGE", "CLUSTER_FAILED_NODES_REPORTED", "CLUSTER_START_IGNORED", "CLUSTER_STOP_IGNORED", "CLUSTER_HOST_STATUS_UPDATED", "CLUSTER_START_REQUESTED", "CLUSTER_AUTORECOVERY_REQUESTED", "CLUSTER_MANUALRECOVERY_REQUESTED", "CLUSTER_MANUALRECOVERY_COULD_NOT_START", "CLUSTER_MANUALRECOVERY_NO_NODES_TO_RECOVER", "CLUSTER_RECOVERED_NODES_REPORTED", "CLUSTER_PRIMARY_GATEWAY_UNHEALTHY_SYNC_STARTED", "CLUSTER_PACKAGES_ON_INSTANCES_ARE_DIFFERENT", "CLUSTER_PACKAGE_VERSIONS_ON_INSTANCES_ARE_MISSING", "CLUSTER_PACKAGE_VERSIONS_ARE_CHANGED", "CLUSTER_PACKAGE_VERSION_CANNOT_BE_QUERIED", "CLUSTER_UPLOAD_RECIPES", "CLUSTER_BOOTSTRAPPER_ERROR_BOOTSTRAP_FAILED_ON_NODES", "CLUSTER_BOOTSTRAPPER_ERROR_DELETING_NODE", "CLUSTER_BOOTSTRAPPER_ERROR_INVALID_NODECOUNT", "CLUSTER_AMBARI_CLUSTER_COULD_NOT_SYNC", "CLUSTER_AMBARI_CLUSTER_SYNCHRONIZED", "DATALAKE_UPGRADE", "DATALAKE_UPGRADE_COULD_NOT_START", "CLUSTER_MANAGER_UPGRADE", "CLUSTER_MANAGER_UPGRADE_FINISHED", "CLUSTER_MANAGER_UPGRADE_FAILED", "CLUSTER_UPGRADE", "CLUSTER_UPGRADE_FINISHED", "CLUSTER_UPGRADE_DOWNLOAD_PARCEL", "CLUSTER_UPGRADE_DISTRIBUTE_PARCEL", "CLUSTER_UPGRADE_START_UPGRADE", "CLUSTER_UPGRADE_FAILED", "CLUSTER_SALT_UPDATE_FAILED", "CLUSTER_SALT_UPDATE_FINISHED", "CLUSTER_STOPPING", "CLUSTER_STOPPED", "CLUSTER_STOP_FAILED", "CLUSTER_SCALING_DOWN", "CLUSTER_SCALED_DOWN", "CLUSTER_SCALING_FAILED", "CLUSTER_STOP_MANAGEMENT_SERVER_STARTED", "CLUSTER_STOP_COMPONENTS_STARTED", "CLUSTER_START_MANAGEMENT_SERVER_STARTED", "CLUSTER_REGENERATE_KEYTABS_STARTED", "CLUSTER_REINSTALL_COMPONENTS_STARTED", "CLUSTER_START_COMPONENTS_STARTED", "CLUSTER_RESTART_ALL_STARTED", "CLUSTER_CM_CLUSTER_SERVICES_STOPPING", "CLUSTER_CM_CLUSTER_SERVICES_STOPPED", "CLUSTER_CM_CLUSTER_SERVICES_STARTED", "CLUSTER_CM_CLUSTER_SERVICES_STARTING", "CLUSTER_CM_SECURITY_GROUP_TOO_STRICT", "CLUSTER_CM_SERVICE_DEREGISTER_FAILED", "CLUSTER_MANAGER_CLUSTER_DECOMMISSIONING_TIME", "CLUSTER_MANAGER_CLUSTER_SERVICES_STOPPING", "CLUSTER_MANAGER_CLUSTER_SERVICES_STOPPED", "CLUSTER_MANAGER_CLUSTER_SERVICES_STARTING", "CLUSTER_MANAGER_CLUSTER_SERVICES_STARTED", "CLUSTER_REMOVING_NODE_FROM_HOSTGROUP", "CLUSTER_FORCE_REMOVING_NODE_FROM_HOSTGROUP", "CLUSTER_CERTIFICATE_REISSUE", "CLUSTER_CERTIFICATE_REDEPLOY", "CLUSTER_CERTIFICATE_RENEWAL_FINISHED", "CLUSTER_CERTIFICATE_RENEWAL_FAILED", "CLUSTER_EXTERNAL_DATABASE_DELETION_STARTED", "CLUSTER_EXTERNAL_DATABASE_DELETION_FAILED", "CLUSTER_EXTERNAL_DATABASE_DELETION_FINISHED", "CLUSTER_EXTERNAL_DATABASE_CREATION_STARTED", "CLUSTER_EXTERNAL_DATABASE_CREATION_FAILED", "CLUSTER_EXTERNAL_DATABASE_CREATION_FINISHED", "STACK_RETRY_FLOW_START", "MAINTENANCE_MODE_VALIDATION_STARTED", "MAINTENANCE_MODE_VALIDATION_FINISHED_FOUND_WARNINGS", "MAINTENANCE_MODE_VALIDATION_FINISHED_NO_WARNINGS", "MAINTENANCE_MODE_VALIDATION_FAILED", "COMMON_BAD_REQUEST_NOTIFICATION_PATTERN" ]
        }
      }
    },
    "ExposedServiceV4Response" : {
      "type" : "object",
      "properties" : {
        "serviceName" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "knoxService" : {
          "type" : "string"
        },
        "knoxUrl" : {
          "type" : "string"
        }
      }
    },
    "ExposedServiceV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExposedServiceV4Response"
          }
        }
      }
    },
    "WorkspaceV4Response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the resource",
          "minLength" : 5,
          "maxLength" : 100,
          "pattern" : "(^[a-z][-a-z0-9]*[a-z0-9]$)"
        },
        "description" : {
          "type" : "string",
          "description" : "description of the resource",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "users" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/UserV4Response"
          }
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "DELETED" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of the resource"
        }
      }
    },
    "WorkspaceV4Responses" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkspaceV4Response"
          }
        }
      }
    },
    "DistroXMultiDeleteV1Request" : {
      "type" : "object",
      "properties" : {
        "names" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "crns" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DistroXScaleV1Request" : {
      "type" : "object",
      "required" : [ "desiredCount", "group" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "name of the instance group"
        },
        "desiredCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "scaling adjustment of the instance groups"
        }
      }
    },
    "DistroXRepairNodesV1Request" : {
      "type" : "object",
      "properties" : {
        "deleteVolumes" : {
          "type" : "boolean",
          "description" : "If true, delete volumes, otherwise reattaches them to a newly created node instance."
        },
        "ids" : {
          "type" : "array",
          "description" : "Node ID list of nodes that need replacement.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DistroXRepairV1Request" : {
      "type" : "object",
      "required" : [ "hostGroups" ],
      "properties" : {
        "hostGroups" : {
          "type" : "array",
          "description" : "List of hostgroups where the failed nodes will be repaired",
          "items" : {
            "type" : "string"
          }
        },
        "nodes" : {
          "description" : "Object consisting of deleteVolumes flag and a list of node IDs which will be repaired specifically. The existing disk volumes on the nodes will be re-created if the deleteVolumes flag is true.",
          "$ref" : "#/definitions/DistroXRepairNodesV1Request"
        },
        "removeOnly" : {
          "type" : "boolean",
          "description" : "If true, the failed nodes will only be removed, otherwise the failed nodes will be removed and new nodes will be started."
        }
      }
    },
    "DistroXMaintenanceModeV1Request" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "maintenance mode status",
          "enum" : [ "ENABLED", "VALIDATION_REQUESTED", "DISABLED" ]
        }
      }
    },
    "FlowLogResponse" : {
      "type" : "object",
      "properties" : {
        "resourceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "flowId" : {
          "type" : "string"
        },
        "flowChainId" : {
          "type" : "string"
        },
        "nextEvent" : {
          "type" : "string"
        },
        "currentState" : {
          "type" : "string"
        },
        "finalized" : {
          "type" : "boolean"
        },
        "nodeId" : {
          "type" : "string"
        },
        "stateStatus" : {
          "type" : "string",
          "enum" : [ "PENDING", "SUCCESSFUL", "FAILED" ]
        },
        "flowTriggerUserCrn" : {
          "type" : "string"
        }
      }
    },
    "FlowCheckResponse" : {
      "type" : "object",
      "properties" : {
        "flowId" : {
          "type" : "string"
        },
        "flowChainId" : {
          "type" : "string"
        },
        "hasActiveFlow" : {
          "type" : "boolean"
        }
      }
    }
  }
}